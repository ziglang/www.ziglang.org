---
.title = "Übersicht",
.author = "",
.date = @date("2024-09-14:00:00:00"),
.layout = "page.shtml",
.custom = {
	"mobile_menu_title": "Übersicht",
},
---
# Funktionshighlights
## Kleine, einfache Sprache

Der Fokus liegt darauf die Anwendung zu debuggen, anstatt seine Kenntnisse der Programmiersprache zu debuggen.

Die gesamte Syntax von Zig wird mit einer [580-zeiligen PEG-Grammatikdatei](https://ziglang.org/documentation/master/#Grammar) angegeben.

Es gibt **keinen versteckten Kontrollfluss**, keine versteckten Speicherzuweisungen, keinen Präprozessor und keine Makros. Wenn es nicht so aussieht, als würde der Zig-Code verzweigen, um eine Funktion aufzurufen, dann tut er das auch nicht. Das bedeutet, dass man sicher sein kann, dass der folgende Code nur `foo()` und dann `bar()` aufruft, und das ist garantiert, ohne dass man die Typen von irgendetwas kennen müsste:

```zig
var a = b + c.d;
foo();
bar();
```

Beispiele versteckten Kontrollflusses:

* D hat `@property`-Funktionen, das sind Methoden, die man mit etwas aufruft, das wie ein Feldzugriff aussieht, im obigen Beispiel könnte also `c.d` eine Funktion aufrufen.
* C++, D und Rust haben Operatorüberladung, so dass der Operator „+“ eine Funktion aufrufen kann.
* C++, D und Go haben 'throw/catch'-Ausnahmen, also könnte `foo()` eine Ausnahme auslösen und verhindern, dass `bar()` aufgerufen wird.

Zig fördert die Code-Wartung und Lesbarkeit, indem der gesamte Kontrollfluss ausschließlich mit Sprachschlüsselwörtern und Funktionsaufrufen verwaltet wird.

## Leistung und Sicherheit: Wähle zwei

Zig hat vier [Build-Modi](https://ziglang.org/documentation/master/#Build-Mode), und sie können alle bis zur [Granularität des Geltungsbereichs](https://ziglang.org/documentation/master/#setRuntimeSafety) gemischt und angepasst werden.

| Parameter | [Debug](/documentation/master/#Debug) | [ReleaseSafe](/documentation/master/#ReleaseSafe) | [ReleaseFast](/documentation/master/#ReleaseFast) | [ReleaseSmall](/documentation/master/#ReleaseSmall) |
|-----------|-------|-------------|-------------|--------------|
Optimierungen – verbessern die Geschwindigkeit, beeinträchtigen das Debugging, beeinträchtigen die Kompilierzeit | | -O3 | -O3| -Os |
Laufzeitsicherheitsprüfungen – beeinträchtigen die Geschwindigkeit, beeinträchtigen die Größe, führen zu Abstürzen statt undefiniertem Verhalten | On | On | | |

So sieht [Integerüberlauf](https://ziglang.org/documentation/master/#Integer-Overflow) zur Kompilierungszeit aus, unabhängig vom Build-Modus:

[]($code.language('=html').buildAsset('features/1-integer-overflow.zig'))

So sieht es zur Laufzeit in sicherheitsgeprüften Builds aus:

[]($code.language('=html').buildAsset('features/2-integer-overflow-runtime.zig'))


Diese [Stacktraces funktionieren auf allen Zielplatformen](#stack-traces-on-all-targets), einschließlich [freistehender Systeme](https://andrewkelley.me/post/zig-stack-traces-kernel-panic-bare-bones-os.html).

Mit Zig kann man sich auf einen sicherheitsaktivierten Build-Modus verlassen und die Sicherheit an Leistungsengpässen selektiv deaktivieren. Das vorherige Beispiel könnte beispielsweise wie folgt geändert werden:

[]($code.language('=html').buildAsset('features/3-undefined-behavior.zig'))

Zig verwendet [undefiniertes Verhalten](https://ziglang.org/documentation/master/#Undefined-Behavior) als messerscharfes Werkzeug sowohl zur Fehlerprävention als auch zur Leistungssteigerung.

Apropos Leistung: Zig ist schneller als C.

– Die Referenzimplementierung verwendet LLVM als Backend für modernste Optimierungen.
- Was andere Projekte "Link Time Optimization" nennen, macht Zig automatisch.
- Für native Ziele sind erweiterte CPU-Funktionen aktiviert (-march=native), dank der Tatsache, dass [Cross-Compiling ein erstklassiger Anwendungsfall ist](#cross-compiling-is-a-first-class-use-case).
- Sorgfältig ausgewähltes undefiniertes Verhalten. Beispielsweise haben in Zig sowohl vorzeichenbehaftete als auch vorzeichenlose Ganzzahlen ein undefiniertes Verhalten bei Überlauf, im Gegensatz zu ausschließlich vorzeichenbehafteten Ganzzahlen in C. Dies [erleichtert Optimierungen, die in C nicht verfügbar sind](https://godbolt.org/z/n_nLEU).
- Zig stellt direkt einen [SIMD-Vektortyp](https://ziglang.org/documentation/master/#Vectors) bereit, wodurch das Schreiben von portablem vektorisiertem Code erleichtert wird.

Es gilt zu beachten, dass Zig keine völlig sichere Sprache ist. Wer die Sicherheitsgeschichte von Zig verfolgen möchte, kann diese Ausgaben abonnieren:

- [enumerate all kinds of undefined behavior, even that which cannot be safety-checked](https://github.com/ziglang/zig/issues/1966)
- [make Debug and ReleaseSafe modes fully safe](https://github.com/ziglang/zig/issues/2301)

## Zig konkurriert mit C, anstatt davon abhängig zu sein

Die Zig-Standardbibliothek ist in libc integriert, aber nicht davon abhängig. Hier ist "Hello World":

[]($code.language('=html').buildAsset('features/4-hello.zig'))

Bei der Kompilierung mit `-O ReleaseSmall`, ohne Debugsymbole und im Single-Thread-Modus entsteht eine statische ausführbare Datei mit 9,8 KiB für das Ziel x86_64-linux:
```
$ zig build-exe hello.zig -O ReleaseSmall -fstrip -fsingle-threaded
$ wc -c hello
9944 hello
$ ldd hello
  not a dynamic executable
```

Ein Windows-Build ist sogar noch kleiner und umfasst nur 4096 Bytes:
```
$ zig build-exe hello.zig -O ReleaseSmall -fstrip -fsingle-threaded -target x86_64-windows
$ wc -c hello.exe
4096 hello.exe
$ file hello.exe
hello.exe: PE32+ executable (console) x86-64, for MS Windows
```

## Reihenfolgeunabhängige Top-Level-Deklarationen

Deklarationen auf oberster Ebene wie globale Variablen sind reihenfolgeunabhängig und werden verzögert analysiert. Die Initialisierungswerte globaler Variablen werden [zur Kompilierzeit ausgewertet](#compile-time-reflection-and-compile-time-code-execution).

[]($code.language('=html').buildAsset('features/5-global-variables.zig'))

## Optionaler Typ anstelle von Nullzeigern

In anderen Programmiersprachen sind Nullzeiger (null pointer) die Quelle vieler Laufzeitausnahmen und werden sogar als [der schlimmste Fehler der Informatik](https://www.lucidchart.com/techblog/2015/08/31/the-worst-mistake-of-computer-science/) bezeichnet.

Unmodifizierte Zig-Zeiger können nicht NULL sein:

[]($code.language('=html').buildAsset('features/6-null-to-ptr.zig'))

Allerdings kann jeder Typ zu einem [optionalen Typ](https://ziglang.org/documentation/master/#Optionals) gemacht werden, indem man ihm ein ? voranstellt:

[]($code.language('=html').buildAsset('features/7-optional-syntax.zig'))

Um auf einen optionalen Wert zuzugreifen, kann man `orelse` verwenden, um einen Standardwert zu liefern:

[]($code.language('=html').buildAsset('features/8-optional-orelse.zig'))

Eine weitere Möglichkeit ist die Verwendung von `if`:

[]($code.language('=html').buildAsset('features/9-optional-if.zig'))

Der gleiche Ausdruck funktioniert mit [while](https://ziglang.org/documentation/master/#while):

[]($code.language('=html').buildAsset('features/10-optional-while.zig'))

## Manuelle Speicherverwaltung

Eine in Zig geschriebene Bibliothek kann überall verwendet werden:

- [Desktopanwendungen](https://github.com/TM35-Metronome/)
- Server mit geringer Latenz
- [Betriebssystemkernel](https://github.com/AndreaOrru/zen)
- [Embedded devices](https://github.com/skyfex/zig-nrf-demo/)
- Echtzeitanwendungen, z. B. Live-Auftritte, Flugzeuge, Herzschrittmacher
- [In Web-Browsern oder anderen Erweiterungen mit WebAssembly](https://shritesh.github.io/zigfmt-web/)
- Durch andere Programmiersprachen, unter Verwendung des C-ABI

Um dies zu erreichen, müssen Zig-Programmierer ihren eigenen Speicher verwalten und Fehler bei der Speicherzuweisung beheben.

Das gilt auch für die Zig-Standardbibliothek. Alle Funktionen, die Speicher zuweisen müssen, akzeptieren einen Allocator-Parameter. Daher kann die Zig-Standardbibliothek auch für ein "freistehende Ziel" verwendet werden.

Zusätzlich zu [Einem neuen Ansatz zur Fehlerbehandlung](#a-fresh-take-on-error-handling) bietet Zig [defer](https://ziglang.org/documentation/master/#defer) und [errdefer](https://ziglang.org/documentation/master/#errdefer), um die gesamte Ressourcenverwaltung – nicht nur die des Speichers – einfach und leicht überprüfbar zu machen.

Ein Beispiel für „defer“ findet man unter [Integration mit C-Bibliotheken ohne FFI/Bindings](#integration-with-c-libraries-without-ffibindings). Hier ist ein Beispiel für die Verwendung von `errdefer`:
[]($code.language('=html').buildAsset('features/11-errdefer.zig'))


## Ein neuer Ansatz zur Fehlerbehandlung

Fehler sind Werte und dürfen nicht ignoriert werden:

[]($code.language('=html').buildAsset('features/12-errors-as-values.zig'))

Fehler können mit [catch](https://ziglang.org/documentation/master/#catch) behandelt werden:

[]($code.language('=html').buildAsset('features/13-errors-catch.zig'))

Das Schlüsselwort [try](https://ziglang.org/documentation/master/#try) ist eine Abkürzung für `catch |err| return err`:

[]($code.language('=html').buildAsset('features/14-errors-try.zig'))

Es gilt zu beachten, dass es sich um einen [Error-Return-Trace](https://ziglang.org/documentation/master/#Error-Return-Traces) und nicht um einen [Stack-Trace](#stack-traces-on-all-targets) handelt. Der Code hat nicht den Preis für das Abwickeln des Stacks bezahlt, um diesen Trace zu erstellen.

Das bei einem Fehler verwendete Schlüsselwort [switch](https://ziglang.org/documentation/master/#switch) stellt sicher, dass alle möglichen Fehler behandelt werden:

[]($code.language('=html').buildAsset('features/15-errors-switch.zig'))

Das Schlüsselwort [unreachable](https://ziglang.org/documentation/master/#unreachable) wird verwendet, um sicherzustellen, dass keine Fehler auftreten:

[]($code.language('=html').buildAsset('features/16-unreachable.zig'))

Dies ruft [undefiniertes Verhalten](#performance-and-safety-choose-two) in den unsicheren Build-Modi auf. Man sollte es daher nur verwenden, wenn der Erfolg garantiert ist.

### Stacktraces auf allen Zielen

Die auf dieser Seite angezeigten Stacktraces und [Error-Return-Traces](https://ziglang.org/documentation/master/#Error-Return-Traces) funktionieren auf allen Tier-1-Support- und einigen Tier-2-Support-Zielen. [Sogar auf freistehenden Zielen](https://andrewkelley.me/post/zig-stack-traces-kernel-panic-bare-bones-os.html)!

Darüber hinaus verfügt die Standardbibliothek über die Möglichkeit, an jedem beliebigen Punkt einen Stacktrace zu erfassen und ihn später in die Standardfehlerausgabe zu übertragen:

[]($code.language('=html').buildAsset('features/17-stack-traces.zig'))

Hier kann man sehen, wie diese Technik im laufenden [GeneralPurposeDebugAllocator-Projekt](https://github.com/andrewrk/zig-general-purpose-allocator/#current-status) verwendet wird.

## Generische Datenstrukturen und Funktionen

Typen sind Werte, die zur Kompilierzeit bekannt sein müssen (comptime known):

[]($code.language('=html').buildAsset('features/18-types.zig'))

Eine generische Datenstruktur ist einfach eine Funktion, die einen `type` zurückgibt:

[]($code.language('=html').buildAsset('features/19-generics.zig'))

## Reflexion zur Kompilierungszeit und Codeausführung zur Kompilierungszeit

Die integrierte Funktion [@typeInfo](https://ziglang.org/documentation/master/#typeInfo) bietet Reflexion:

[]($code.language('=html').buildAsset('features/20-reflection.zig'))

Die Zig-Standardbibliothek verwendet diese Technik, um formatierte Ausgabe zu implementieren. Obwohl es sich um eine [kleine, einfache Sprache](#small-simple-language) handelt, ist die formatierte Ausgabe von Zig vollständig in Zig implementiert. In C hingegen sind Kompilierungsfehler für 'printf' fest im Compiler codiert. In Rust ist das Makro für formatierte Ausgabe ebenfalls fest im Compiler codiert.

Zig kann auch Funktionen und Codeblöcke zur Kompilierzeit auswerten. In einigen Kontexten, wie z. B. bei der Initialisierung globaler Variablen, wird der Ausdruck zur Kompilierzeit implizit ausgewertet. Andernfalls kann man Code zur Kompilierzeit explizit mit dem Schlüsselwort [comptime](https://ziglang.org/documentation/master/#comptime) auswerten. Das kann besonders leistungsfähig sein, wenn es mit 'Assertions' (Programmprüfungen) kombiniert wird:

[]($code.language('=html').buildAsset('features/21-comptime.zig'))

## Integration mit C-Bibliotheken ohne FFI/Bindings

[@cImport](https://ziglang.org/documentation/master/#cImport) importiert direkt Typen, Variablen, Funktionen und einfache Makros zur Verwendung in Zig. Es übersetzt sogar Inline-Funktionen von C in Zig.

Hier ist ein Beispiel für die Ausgabe einer Sinuswelle mit [libsoundio](http://libsound.io/):

<u>sine.zig</u>
[]($code.language('=html').buildAsset('features/22-sine-wave.zig'))

```
$ zig build-exe sine.zig -lsoundio -lc
$ ./sine
Output device: Built-in Audio Analog Stereo
^C
```

[Dieser Zig-Code ist wesentlich einfacher als der entsprechende C-Code](https://gist.github.com/andrewrk/d285c8f912169329e5e28c3d0a63c1d8) und verfügt zudem über mehr Sicherheitsvorkehrungen. Dies alles wird durch den direkten Import der C-Headerdatei erreicht – keine API-Bindungen.

*Zig kann C-Bibliotheken besser verwenden als C.*

### Zig ist auch ein C-Compiler

Hier ist ein Beispiel dafür, wie Zig C-Code erstellt:

<u>hello.c</u>
```c
#include <stdio.h>

int main(int argc, char **argv) {
    printf("Hello world\n");
    return 0;
}
```

```
$ zig build-exe hello.c --library c
$ ./hello
Hello world
```

Mittels `--verbose-cc` kann man sehen, welcher C-Compilerbefehl ausgeführt wurde:
```
$ zig build-exe hello.c --library c --verbose-cc
zig cc -MD -MV -MF .zig-cache/tmp/42zL6fBH8fSo-hello.o.d -nostdinc -fno-spell-checking -isystem /home/andy/dev/zig/build/lib/zig/include -isystem /home/andy/dev/zig/build/lib/zig/libc/include/x86_64-linux-gnu -isystem /home/andy/dev/zig/build/lib/zig/libc/include/generic-glibc -isystem /home/andy/dev/zig/build/lib/zig/libc/include/x86_64-linux-any -isystem /home/andy/dev/zig/build/lib/zig/libc/include/any-linux-any -march=native -g -fstack-protector-strong --param ssp-buffer-size=4 -fno-omit-frame-pointer -o .zig-cache/tmp/42zL6fBH8fSo-hello.o -c hello.c -fPIC
```

Es gilt zu beachten, dass bei einer erneuten Ausführung des Befehls keine Ausgabe erfolgt und der Vorgang sofort beendet wird:
```
$ time zig build-exe hello.c --library c --verbose-cc

real	0m0.027s
user	0m0.018s
sys	0m0.009s
```

Das ist dem [Build-Artifact-Caching](https://ziglang.org/download/0.4.0/release-notes.html#Build-Artifact-Caching) zu verdanken. Zig analysiert die .d-Datei automatisch und verwendet ein robustes Caching-System, um doppelte Arbeit zu vermeiden.

Zig kann nicht nur C-Code kompilieren, sondern es gibt auch einen sehr guten Grund, Zig als C-Compiler zu verwenden: [Zig wird mit libc ausgeliefert](#zig-ships-with-libc).

### Export von Funktionen, Variablen und Typen, von denen C-Code abhängt

Einer der wichtigsten Anwendungsfälle für Zig ist das Exportieren einer Bibliothek mit der C-ABI, die von anderen Programmiersprachen aufgerufen werden kann. Das Schlüsselwort `export` vor Funktionen, Variablen und Typen bewirkt, dass diese Teil der Bibliotheks-API sind:

<u>mathtest.zig</u>
[]($code.language('=html').buildAsset('features/23-math-test.zig'))

Um eine statische Bibliothek zu erstellen:
```
$ zig build-lib mathtest.zig
```

Um eine dynamische Bibliothek zu erstellen:
```
$ zig build-lib mathtest.zig -dynamic
```

Hier ein Beispiel mit dem [Zig-Build-System](#zig-build-system):

<u>test.c</u>
```c
#include "mathtest.h"
#include <stdio.h>

int main(int argc, char **argv) {
    int32_t result = add(42, 1337);
    printf("%d\n", result);
    return 0;
}
```

<u>build.zig</u>
[]($code.language('=html').buildAsset('features/24-build.zig'))

```
$ zig build test
1379
```

## Cross-Kompilierung ist ein erstklassiger Anwendungsfall

Zig kann für alle Ziele aus der Support-Tabelle (see latest release notes) mit Tier-3-Support oder besser bauen. Es muss keine "Cross-Toolchain" oder ähnliches installiert werden. Hier ist ein natives "Hello World":

[]($code.language('=html').buildAsset('features/4-hello.zig'))

Jetzt wird es für x86_64-Windows, x86_64-MacOS und aarch64-Linux erstellt:
```
$ zig build-exe hello.zig -target x86_64-windows
$ file hello.exe
hello.exe: PE32+ executable (console) x86-64, for MS Windows
$ zig build-exe hello.zig -target x86_64-macos
$ file hello
hello: Mach-O 64-bit x86_64 executable, flags:<NOUNDEFS|DYLDLINK|TWOLEVEL|PIE>
$ zig build-exe hello.zig -target aarch64-linux
$ file hello
hello: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), statically linked, with debug_info, not stripped
```

Dies funktioniert auf jedem Tier-3+-Ziel, für jedes Tier-3+-Ziel.

### Zig wird mit libc ausgeliefert

Alle verfügbaren libc-Ziele kann man mit `zig targets` finden:
```
...
 "libc": [
  "aarch64_be-linux-gnu",
  "aarch64_be-linux-musl",
  "aarch64_be-windows-gnu",
  "aarch64-linux-gnu",
  "aarch64-linux-musl",
  "aarch64-windows-gnu",
  "armeb-linux-gnueabi",
  "armeb-linux-gnueabihf",
  "armeb-linux-musleabi",
  "armeb-linux-musleabihf",
  "armeb-windows-gnu",
  "arm-linux-gnueabi",
  "arm-linux-gnueabihf",
  "arm-linux-musleabi",
  "arm-linux-musleabihf",
  "arm-windows-gnu",
  "i386-linux-gnu",
  "i386-linux-musl",
  "i386-windows-gnu",
  "mips64el-linux-gnuabi64",
  "mips64el-linux-gnuabin32",
  "mips64el-linux-musl",
  "mips64-linux-gnuabi64",
  "mips64-linux-gnuabin32",
  "mips64-linux-musl",
  "mipsel-linux-gnu",
  "mipsel-linux-musl",
  "mips-linux-gnu",
  "mips-linux-musl",
  "powerpc64le-linux-gnu",
  "powerpc64le-linux-musl",
  "powerpc64-linux-gnu",
  "powerpc64-linux-musl",
  "powerpc-linux-gnu",
  "powerpc-linux-musl",
  "riscv64-linux-gnu",
  "riscv64-linux-musl",
  "s390x-linux-gnu",
  "s390x-linux-musl",
  "sparc-linux-gnu",
  "sparcv9-linux-gnu",
  "wasm32-freestanding-musl",
  "x86_64-linux-gnu",
  "x86_64-linux-gnux32",
  "x86_64-linux-musl",
  "x86_64-windows-gnu"
 ],
 ```

Das bedeutet, dass `--library c` für diese Ziele *nicht von irgendwelchen Systemdateien abhängig ist*!

Schauen wir uns das [C-Hello-World-Beispiel](#zig-ist-auch-ein-C-Compiler) noch einmal an:
```
$ zig build-exe hello.c --library c
$ ./hello
Hello world
$ ldd ./hello
	linux-vdso.so.1 (0x00007ffd03dc9000)
	libc.so.6 => /lib/libc.so.6 (0x00007fc4b62be000)
	libm.so.6 => /lib/libm.so.6 (0x00007fc4b5f29000)
	libpthread.so.0 => /lib/libpthread.so.0 (0x00007fc4b5d0a000)
	libdl.so.2 => /lib/libdl.so.2 (0x00007fc4b5b06000)
	librt.so.1 => /lib/librt.so.1 (0x00007fc4b58fe000)
	/lib/ld-linux-x86-64.so.2 => /lib64/ld-linux-x86-64.so.2 (0x00007fc4b6672000)
```

[glibc](https://www.gnu.org/software/libc/) unterstützt den statischen Build nicht, [musl](https://www.musl-libc.org/) hingegen schon:
```
$ zig build-exe hello.c --library c -target x86_64-linux-musl
$ ./hello
Hello world
$ ldd hello
  not a dynamic executable
```

In diesem Beispiel hat Zig die 'musl libc' aus dem Quellcode erstellt und dann damit verknüpft. Der Build der 'musl libc' für x86_64-Linux bleibt dank des [Caching-Systems](https://ziglang.org/download/0.4.0/release-notes.html#Build-Artifact-Caching) verfügbar, sodass diese 'libc' jederzeit sofort verfügbar ist, wenn sie erneut benötigt wird.

Das bedeutet, dass diese Funktionalität auf jeder Plattform verfügbar ist. Windows- und macOS-Benutzer können Zig- und C-Code erstellen und ihn mit 'libc' verknüpfen, für jedes der oben aufgeführten Ziele. Ebenso kann Code für andere Architekturen plattformübergreifend kompiliert werden:
```
$ zig build-exe hello.c --library c -target aarch64-linux-gnu
$ file hello
hello: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, for GNU/Linux 2.0.0, with debug_info, not stripped
```

In mancher Hinsicht ist Zig ein besserer C-Compiler als andere C-Compiler!

Diese Funktionalität ist mehr als das Bündeln einer Cross-Compilation-Toolchain zusammen mit Zig. Beispielsweise beträgt die Gesamtgröße der von Zig mitgelieferten libc-Header unkomprimiert 22 MiB. Die Header für 'musl libc' + Linux-Header auf x86_64 allein sind dagegen 8 MiB groß und für 'glibc' 3,1 MiB (glibc fehlen die Linux-Header), obwohl Zig derzeit mit 40 'libcs' ausgeliefert wird. Bei einer einfachen Bündelung wären das 444 MiB. Dank des [process-headers-Tools](https://github.com/ziglang/zig/blob/0.4.0/libc/process_headers.zig) und einiger [guter alter Handarbeit](https://github.com/ziglang/zig/wiki/Updating-libc) bleiben die Zig-Binär-Tarballs insgesamt etwa 30 MiB groß, obwohl sie 'libc' für alle diese Ziele sowie 'compiler-rt', 'libunwind' und 'libcxx' unterstützen und obwohl es sich um einen C-Compiler handelt, der mit Clang kompatibel ist. Zum Vergleich: Der Windows-Binär-Build von 'clang 8.0.0' selbst von llvm.org ist 132 MiB groß.

Es gilt zu beachten, dass nur die Tier-1 Support-Ziele gründlich getestet wurden. Es ist geplant, [weitere 'libcs' hinzuzufügen](https://github.com/ziglang/zig/issues/514) (auch für Windows) und [Testabdeckung für den Build mit allen 'libcs' hinzuzufügen](https://github.com/ziglang/zig/issues/2058).

## Zig Build-System

Zig verfügt über ein Build-System, sodass man weder 'make' noch 'cmake' oder ähnliches benötigt.
```
$ zig init-exe
Created build.zig
Created src/main.zig

Next, try `zig build --help` or `zig build run`
```

<u>src/main.zig</u>
[]($code.language('=html').buildAsset('features/25-all-bases.zig'))


<u>build.zig</u>
[]($code.language('=html').buildAsset('features/26-build.zig'))


Werfen wir einen Blick auf das Menü mit `--help`.
```
$ zig build --help
Usage: zig build [steps] [options]

Steps:
  install (default)      Copy build artifacts to prefix path
  uninstall              Remove build artifacts from prefix path
  run                    Run the app

General Options:
  --help                 Print this help and exit
  --verbose              Print commands before executing them
  --prefix [path]        Override default install prefix
  --search-prefix [path] Add a path to look for binaries, libraries, headers

Project-Specific Options:
  -Dtarget=[string]      The CPU architecture, OS, and ABI to build for.
  -Drelease-safe=[bool]  optimizations on and safety on
  -Drelease-fast=[bool]  optimizations on and safety off
  -Drelease-small=[bool] size optimizations on and safety off

Advanced Options:
  --build-file [file]         Override path to build.zig
  --cache-dir [path]          Override path to zig cache directory
  --override-lib-dir [arg]    Override path to Zig lib directory
  --verbose-tokenize          Enable compiler debug output for tokenization
  --verbose-ast               Enable compiler debug output for parsing into an AST
  --verbose-link              Enable compiler debug output for linking
  --verbose-ir                Enable compiler debug output for Zig IR
  --verbose-llvm-ir           Enable compiler debug output for LLVM IR
  --verbose-cimport           Enable compiler debug output for C imports
  --verbose-cc                Enable compiler debug output for C compilation
  --verbose-llvm-cpu-features Enable compiler debug output for LLVM CPU features
```

Man kann sehen, dass einer der verfügbaren Schritte ausgeführt wird.
```
$ zig build run
All your base are belong to us.
```

Hier sind einige Beispiele für Build-Skripte:

- [Build script of OpenGL Tetris game](https://github.com/andrewrk/tetris/blob/master/build.zig)
- [Build script of bare metal Raspberry Pi 3 arcade game](https://github.com/andrewrk/clashos/blob/master/build.zig)
- [Build script of self-hosted Zig compiler](https://github.com/ziglang/zig/blob/master/build.zig)

## Parallelität über asynchrone Funktionen

Der folgende Abschnitt wurde aus der Übersetzung entfernt, da Zig derzeit keine asynchrone Funktionen mehr unterstützt und es auch nicht klar ist, ob und wann es diese wieder geben wird, siehe: [async/await/suspend/resume](https://github.com/ziglang/zig/issues/6025)


## Unterstützung einer großen Auswahl an Zielen

Zig verwendet ein "Support-Tier"-System, um den Grad der Unterstützung für verschiedene Ziele anzugeben.

[Support Table as of Zig 0.11.0](https://ziglang.org/download/0.11.0/release-notes.html#Support-Table)

## Einfach für Paketbetreuer

Der Zig-Compiler ist vollständig selbstgehostet.

Nicht-Debug-[Build-Modi](https://ziglang.org/documentation/master/#Build-Mode) sind reproduzierbar/deterministisch.

Es gibt eine [JSON-Version der Download-Seite](https://ziglang.org/download/index.json).

Mehrere Mitglieder des Zig-Teams haben Erfahrung in der Paketwartung.

- [Daurnimator](https://github.com/daurnimator) verwaltet das [Arch Linux-Paket](https://archlinux.org/packages/extra/x86_64/zig/)
- [Marc Tiehuis](https://tiehuis.github.io/) verwaltet das Visual Studio Code-Paket.
- [Andrew Kelley](https://andrewkelley.me/) hat etwa ein Jahr mit der [Paketverwaltung von Debian und Ubuntu](https://qa.debian.org/developer.php?login=superjoe30%40gmail.com&comaint=yes) verbracht und trägt gelegentlich zu [nixpkgs](https://github.com/NixOS/nixpkgs/) bei.
- [Jeff Fowler](https://blog.jfo.click/) verwaltet das Homebrew-Paket und hat das [Sublime-Paket](https://github.com/ziglang/sublime-zig-language) gestartet (jetzt verwaltet von [emekoi](https://github.com/emekoi)).
