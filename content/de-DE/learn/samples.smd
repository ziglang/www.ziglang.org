---
.title = "Beispiele",
.author = "",
.date = @date("2024-09-14:00:00:00"),
.layout = "page.shtml",
.custom = {
	"mobile_menu_title": "Beispiele",
	"toc": true,
},
---

# [Aufruf externer Bibliotheks-Funktionen]($heading.id('ext'))
Alle System-API-Funktionen können auf diese Weise aufgerufen werden, man benötigt keine Bibliotheksbindungen (Wrapper), um sie zu verwenden.

[]($code.language('=html').buildAsset("samples/0-windows-msgbox.zig"))

# [Erkennung von Speicherlecks]($heading.id('leak'))
Mit dem `std.heap.GeneralPurposeAllocator` kann man doppelte Freigaben und Speicherlecks erkennen.

[]($code.language('=html').buildAsset("samples/1-memory-leak.zig"))


# [C-Interoperabilität]($heading.id('c-interop'))
Beispiel für den Import einer C-Header-Datei und die Verknüpfung mit libc und raylib.

[]($code.language('=html').buildAsset("samples/2-c-interop.zig"))


# [Zigg Zagg]($heading.id('zigg-zagg'))
Zig ist *optimiert* für Code-Interviews (nicht wirklich).

[]($code.language('=html').buildAsset("samples/3-ziggzagg.zig"))


# [Generische Typen]($heading.id('generic'))
In Zig sind Typen zur Kompilierzeit bekannte Werte (comptime values) und wir verwenden Funktionen, die einen Typ zurückgeben, um generische Algorithmen und Datenstrukturen zu implementieren. In diesem Beispiel implementieren wir eine einfache generische Warteschlange und testen ihr Verhalten.

[]($code.language('=html').buildAsset("samples/4-generic-type.zig"))


# [Verwenden von cURL aus Zig]($heading.id('curl'))

[]($code.language('=html').buildAsset("samples/5-curl.zig"))
