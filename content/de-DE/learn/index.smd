---
.title = "Lernen",
.author = "",
.date = @date("2024-09-14:00:00:00"),
.layout = "learn.shtml",
.custom = {
	"mobile_menu_title": "Lernen",
},
---
# [Lernen]($section.id('learn'))
Dieser Abschnitt listet nützliche Ressourcen auf, vom Nichtwissen über Zig 
bis zum Verständnis seiner Philosophie.


## [Leitfäden]($section.id('guides'))
Dieser Abschnitt wird irgendwann in die Dokumentation der Zig-Standardbibliothek aufgenommen, aber
in der Zwischenzeit kannst du ihn hier durchlesen.

- [Zig-Build-System](./build-system/)
Einführung in das Zig-Build-System.

## Einführungen
Dies sind Einführungen in Zig, die sich an Programmierer mit unterschiedlichen Hintergründen richten.

- [Eingehende Übersicht](./overview/)  
Hier findest du einen ausführlichen Überblick über die Funktionen von Zig aus der Perspektive der Systemprogrammierung.
- [Warum Zig, wenn es bereits C++, D, und Rust gibt?](./why_zig_rust_d_cpp/)  
Eine Einführung in Zig für C++, D und Rust-Entwickler.
- [Code-Beispiele](./samples/)  
Eine Liste mit Schnipseln, um ein Gefühl dafür zu bekommen, wie der Zig-Code aussieht.
- [Werkzeuge](./tools/)  
Eine Liste nützlicher Werkzeuge, die dir beim Schreiben von Zig-Code helfen.


## Erste Schritte
Wenn du bereit bist mit der Programmierung in Zig zu beginnen, hilft dir diese Anleitung bei der Einrichtung deiner Entwicklungsumgebung.

- [Erste Schritte](./getting-started)  

## Online-Lernressourcen
- [Introduction to Zig: a project-based book](https://github.com/pedropark99/zig-book)
Ein offenes, technisches Einführungsbuch für Zig.
- [zig.guide](https://zig.guide)  
Eine strukturierte Einführung in Zig von [Sobeston](https://github.com/sobeston).
- [Ziglings](https://ziglings.org)  
Lerne Zig, indem du kleine fehlerhafte Programme reparierst.
- [Zig bei Exercism](https://exercism.org/tracks/zig)
Löse Programmieraufgaben und lasse dich dabei von einem Mentor betreuen, um Zig flüssig zu beherrschen.
- [Lerne Zig](https://www.openmymind.net/learning_zig/)
Kurze Einführung in Zig, die sich gut für Entwickler eignet, die von Garbage-Collected-Sprachen kommen, wie Python, JavaScript etc.

## Relevante Videos und Blogbeiträge
- [Road to Zig 1.0](https://www.youtube.com/watch?v=Gv2I7qTux7g) [video]  
Video von [Andrew Kelley](https://andrewkelley.me) zur Einführung von Zig und seiner Philosophie.
- [Zig's New Relationship with LLVM](https://kristoff.it/blog/zig-new-relationship-llvm/)  
Ein Blogbeitrag über die Arbeit an der Entwicklung des selbst gehosteten Zig-Compilers, der auch in einem [Artikel von lwn.net] (https://lwn.net/Articles/833400/) zu finden ist.


















