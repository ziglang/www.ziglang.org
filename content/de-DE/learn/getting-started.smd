---
.title = "Erste Schritte",
.author = "",
.date = @date("2024-09-14:00:00:00"),
.layout = "page.shtml",
.custom = {
	"mobile_menu_title": "Erste Schritte",
	"toc": true,
},
---

# Freigaben oder Nightly-Build?
Zig hat v1.0 noch nicht erreicht und der aktuelle Release-Zyklus ist an neue LLVM-Releases gebunden, die einen ~6-monatigen Rhythmus haben.
In der Praxis neigen **Zig-Veröffentlichungen dazu, weit auseinander zu liegen und angesichts der aktuellen Entwicklungsgeschwindigkeit veraltet zu sein**.

Es ist in Ordnung, Zig mit einer freigegebenen Version zu testen, aber wenn du Zig magst und 
tiefer eintauchen willst, **empfehlen wir dir ein Upgrade auf ein Nightly-Build**, hauptsächlich weil 
es auf diese Weise einfacher ist Hilfe zu bekommen: die meisten der Community und Seiten wie 
[zig.guide](https://zig.guide) verfolgen den Master-Zweig aus den oben genannten Gründen.

Die gute Nachricht ist, es st sehr einfach von einer Zig-Version zu einer anderen zu wechseln,
oder sogar mehrere Versionen gleichzeitig auf dem System zu haben:
Zig-Versionen sind in sich geschlossene Archive, die überall im System abgelegt werden können.


# Zig installieren
## [Direkter download]($heading.id('direct'))
Das ist der einfachste Weg Zig zu erhalten: Hole dir ein Zig-Bundle für deine Plattform von der [Downloads](/download)-Seite,
entpacke es in ein Verzeichnis und füge es deinem `PATH` hinzu, um `zig` von jedem Ort aus aufrufen zu können.

### Einrichten von PATH unter Windows
Um einen PATH unter Windows einzurichten, führe **einen** der folgenden Codeschnipsel in einer Powershell-Instanz aus.
Wähle, ob du diese Änderung systemweit anwenden möchtest (erfordert die Ausführung von Powershell mit Administratorrechten)
oder nur für einen Benutzer, und **stelle sicher, dass du das Snippet so änderst, dass es auf den Ort verweist, an dem deine Kopie von Zig liegt**.
Das `;` vor `C:` ist kein Tippfehler.

Systemweit (**admin** Powershell):
```
[Environment]::SetEnvironmentVariable(
   "Path",
   [Environment]::GetEnvironmentVariable("Path", "Machine") + ";C:\your-path\zig-windows-x86_64-your-version",
   "Machine"
)
```

Benutzerebene (Powershell):
```
[Environment]::SetEnvironmentVariable(
   "Path",
   [Environment]::GetEnvironmentVariable("Path", "User") + ";C:\your-path\zig-windows-x86_64-your-version",
   "User"
)
```
Wenn du fertig bist, starte die Powershell-Instanz neu.

### Einrichten von PATH unter Linux, macOS, BSD
Füge das Verzeichnis des Zig-Binaries deiner PATH-Umgebungsvariablen hinzu.

Das geschieht im Allgemeinen durch Hinzufügen einer Exportzeile zu deinem Shell-Startskript (`.profile`, `.zshrc`, ...)
```bash
export PATH=$PATH:~/path/to/zig
```
Wenn du fertig bist, `source` entweder dein Startskript oder starte die Shell-Instanz neu.



## [Paketverwaltungen]($heading.id('managers'))
### Windows
**WinGet**  
Zig ist verfügbar unter: [WinGet](https://github.com/microsoft/winget-pkgs/tree/master/manifests/z/zig/zig).
```
winget install -e --id zig.zig
```

**Chocolatey**  
Zig ist verfügbar unter: [Chocolatey](https://chocolatey.org/packages/zig).
```
choco install zig
```

**Scoop**  
Zig ist verfügbar unter: [Scoop](https://scoop.sh/#/apps?q=zig&id=7e124d6047c32d426e4143ab395d863fc9d6d491).
```
scoop install zig
```
Letzte Entwicklerversion: [dev build](https://scoop.sh/#/apps?q=zig&id=921df07e75042de645204262e784a17c2421944c):
```
scoop bucket add versions
scoop install versions/zig-dev
```

### macOS

**Homebrew**  
Letzte freigegebene Version:
```
brew install zig
```

**MacPorts**
```
sudo port install zig
```
### Linux
Zig ist auch in vielen neuen Paketverwaltungen für Linux verfügbar. [Hier](https://github.com/ziglang/zig/wiki/Install-Zig-from-a-Package-Manager)
findest du eine aktualisierte Liste, jedoch enhalten einige Pakete möglicherweise eine veraltete Zig-Version.

## [Zig kompilieren]($heading.id('source'))
[Hier](https://github.com/ziglang/zig/wiki/Building-Zig-From-Source) 
findest du weitere Informationen, wie du Zig aus dem Quellcode erzeugen kannst, für Linux, macOS und Windows.

# Empfohlene Werkzeuge
## Syntaxhervorhebung und LSP
Alle wichtigen Texteditoren unterstützen die Syntaxhervorhebung für Zig.
Bei einigen ist es Standard, bei anderen muss ein Plugin installiert werden.

Wenn du an einer tieferen Integration zwischen Zig und deinem Editor interessiert bist, 
schaue dir [zigtools/zls](https://github.com/zigtools/zls) an.

Wenn du wissen willst was es sonst noch so für Zig gibt, schaue dir den Abschnitt [Werkzeuge](tools) an.


# Führe "Hello World" aus
Wenn du den Installationsprozess korrekt abgeschlossen hast, solltest du nun in der Lage sein,
den Zig-Compiler aus der Shell heraus aufzurufen.
Erstelle jetzt dein erstes Zig-Programm!

Navigiere in dein Projektverzeichnis und führe folgendes aus:
```bash
mkdir hello-world
cd hello-world
zig init
```

Das sollte die Ausgabe sein:
```
info: created build.zig
info: created build.zig.zon
info: created src/main.zig
info: created src/root.zig
info: see `zig build --help` for a menu of options
```

Das Ausführen von `zig build run` sollte dann die ausführbare Datei kompilieren und ausführen, was letztendlich zu diesem Ergebnis führt:
```
All your codebase are belong to us.
Run `zig build test` to run the tests.
```

Herzlichen Glückwunsch, du hast eine funktionierende Zig-Installation!

# Nächste Schritte
**Schaue dir andere Ressourcen im Abschnitt [Lernen](/learn)** an, stelle sicher, dass du die Dokumentation für deine Version
von Zig aufgerufen hast (Hinweis: nächtliche Builds sollten die `master`-Dokumentation verwenden) und schaue dir [zig.guide](https://zig.guide) an.

Zig ist ein junges Projekt, und leider haben wir noch nicht die Kapazität, umfangreiche Dokumentation und Lernmaterialien für alles zu erstellen.
Daher solltest du in Erwägung ziehen, [einer der bestehenden Zig-Communities beizutreten](https://github.com/ziglang/zig/wiki/Community)
um Hilfe zu bekommen, wenn du nicht weiterkommen, und auch Veranstaltunge wie [Zig SHOWTIME](https://zig.show) zu besuchen.

Wenn dir Zig gefällt und du helfen willst, die Entwicklung zu beschleunigen, [erwäge bitte eine Spende an die Zig Software Foundation](/zsf)
<img src=„/heart.svg“ style=„vertical-align:middle; margin-right: 5px“>.
