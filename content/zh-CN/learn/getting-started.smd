---
.title = "快速入门",
.author = "",
.date = @date("2024-08-07:00:00:00"),
.layout = "page.shtml",
.custom = {
	"mobile_menu_title": "快速入门",
	"toc": true,
},
---

# 选择带版本号的版本还是夜间构建版本？
Zig 还没有达到 v1.0 版本，目前的发布周期与 LLVM 的新版本挂钩，其发布周期约为 6 个月。因此，**Zig 的发布往往间隔很久，以目前的开发速度，最终会变得过时**。

使用有标签的版本来体验 Zig 是可以的，但如果你决定喜欢 Zig 并想深入了解，**我们鼓励你升级到夜间构建版本**，主要是因为这样你会更容易得到帮助：大多数社区和像 [zig.guide](https://zig.guide) 这样的网站都会跟踪主分支，原因如上所述。

好消息是，从一个 Zig 版本切换到另一个版本非常容易，甚至可以在系统中同时存在多个版本。Zig 发布的版本是独立的存档，可以放在系统的任何地方。


# 安装 Zig
## [直接下载]($heading.id('direct'))
这是最直接的获取 Zig 的方法：从[下载](/download)页面为你的平台获取压缩包，将其解压到一个目录，再添加到你的 PATH 环境变量里，然后就可在任意位置调用 Zig 了。

### 在 Windows 上设置 PATH
要在 Windows 上设置 PATH，请在 PowerShell 中运行以下**任一**代码片段。选择要在系统级别上应用此更改（需要在有管理员权限的情况下运行 PowerShell）还是只针对你使用的用户，并**确保更改代码以指向 Zig 所在的位置**。注意在 `C:` 之前的 `;` 不是拼写错误。

系统级安装 (**管理员**PowerShell):
```
[Environment]::SetEnvironmentVariable(
   "Path",
   [Environment]::GetEnvironmentVariable("Path", "Machine") + ";C:\your-path\zig-windows-x86_64-your-version",
   "Machine"
)
```

用户级安装 (PowerShell):
```
[Environment]::SetEnvironmentVariable(
   "Path",
   [Environment]::GetEnvironmentVariable("Path", "User") + ";C:\your-path\zig-windows-x86_64-your-version",
   "User"
)
```
运行完毕后重启你的 PowerShell 实例。

### 在 Linux, MacOS, BSD 上设置 PATH
将 zig 二进制镜像的位置添加到 PATH 环境变量中。

This is generally done by adding an export line to your shell startup script (`.profile`, `.zshrc`, ...)
```bash
export PATH=$PATH:~/path/to/zig
```
完成后，可以`source`你的启动文件或者重启 Shell。




## [包管理]($heading.id('managers'))
### Windows
**WinGet**  
Zig 在 [WinGet](https://github.com/microsoft/winget-pkgs/tree/master/manifests/z/zig/zig) 上可用。
```
winget install -e --id zig.zig
```

**Chocolatey**  
Zig 在 [Chocolatey](https://chocolatey.org/packages/zig) 上可用。
```
choco install zig
```

**Scoop**  
Zig 在 [Scoop](https://scoop.sh/#/apps?q=zig&id=7e124d6047c32d426e4143ab395d863fc9d6d491) 上可用。
```
scoop install zig
```
最新的 [dev build](https://scoop.sh/#/apps?q=zig&id=921df07e75042de645204262e784a17c2421944c):
```
scoop bucket add versions
scoop install versions/zig-dev
```

### macOS

**Homebrew**  
最新带标签版本：
```
brew install zig
```

**MacPorts**
```
port install zig
```
### Linux
Zig 也存在于许多 Linux 的包管理器中。[从这里（英文）](https://github.com/ziglang/zig/wiki/Install-Zig-from-a-Package-Manager)可以找到一个更新的列表，但请记住，一些软件包管理器可能会附带过时的 Zig 版本。

## [从源码构建]($heading.id('source'))
[从这里（英文）](https://github.com/ziglang/zig/wiki/Building-Zig-From-Source)可以找到更多关于如何在 Linux、macOS 和 Windows 下从源代码构建 Zig 的信息。

# 推荐工具
## 语法高亮和语言服务器（LSP）
所有主流文本编辑器都有 Zig 的语法高亮支持。有一些内置此功能，有一些需要安装插件。

如果你对 Zig 和你的编辑器的深度整合感兴趣，可以查看 [zigtools/zls](https://github.com/zigtools/zls)。

如果你对其他的工具感兴趣，可以查看[工具](tools)章节。


# 运行 Hello World
如果你正确地完成了安装过程，你现在应该可以从你的 shell 中运行 Zig 编译器了。让我们创建你的第一个 Zig 程序来测试一下吧！

在你存放项目的目录，执行：
```bash
mkdir hello-world
cd hello-world
zig init
```

这将会输出：
```
info: created build.zig
info: created build.zig.zon
info: created src/main.zig
info: created src/root.zig
info: see `zig build --help` for a menu of options
```

执行 `zig build run` 应该会编译成可执行文件并运行，最终结果将会是：
```
All your codebase are belong to us.
Run `zig build test` to run the tests.
```

恭喜你，你已经安装好了 Zig！

# 下一步
**查看在[学习](/learn)章节的其他资源**，请务必找到与你的 Zig 版本匹配的文档。
（注意：夜间构建版本应该使用主分支上的文档），并考虑读一读 [zig.guide](https://zig.guide)。

Zig 是一个年轻的项目，遗憾的是我们还没有能力为所有的东西制作大量的文档和学习材料。
因此，你应该考虑[加入其中一个 Zig 社区](https://github.com/ziglang/zig/wiki/Community)
以在遇到问题是获取帮助，同样也可以看看 [Zig SHOWTIME（英文）](https://zig.show)。

最后，如果你喜欢 Zig 并想加速 Zig 开发，[考虑捐助 Zig 软件基金会](/zsf)
<img src="/heart.svg" style="vertical-align:middle; margin-right: 5px">.
