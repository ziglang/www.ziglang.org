---
.title = "Початок Роботи",
.author = "",
.date = @date("2024-08-07:00:00:00"),
.layout = "page.shtml",
.custom = {
	"mobile_menu_title": "Початок Роботи",
	"toc": true,
},
---

# Реліз із тегами чи нічна збірка?
Zig ще не досяг версії 1.0, і поточний цикл випуску прив’язаний до нових випусків LLVM, які відбуваються приблизно раз на 6 місяців.
З практичної точки зору, **Випуски Zig, як правило, знаходяться далеко одна від одної та з часом стають застарілими, враховуючи поточну швидкість розробки**.

Добре оцінювати Zig за допомогою версії з тегами, але якщо ви вирішите, що вам подобається Zig і
хочете зануритися глибше, **ми радимо вам перейти на нічну збірку**, головним чином тому, що
таким чином вам буде легше отримати допомогу: більшість спільнот і сайтів таких як
[zig.guide](https://zig.guide) відстежують головну гілку з причин, зазначених вище.

Хороша новина полягає в тому, що дуже легко переходити з однієї версії Zig на іншу або навіть мати кілька версій, присутніх у системі одночасно: випуски Zig — це самодостатні архіви, які можна розмістити будь-де у вашій системі.


# Встановлення Zig
## [Пряме завантаження]($heading.id('direct'))
Це найпростіший спосіб отримати Zig: візьміть пакет Zig для вашої платформи зі сторінки [Завантаження](/download),
витягніть його в каталог і додайте до свого `PATH`, щоб мати можливість викликати `zig` з будь-якого місця.

### Налаштування PATH у Windows
Щоб налаштувати шлях у Windows, запустіть **один** із наведених нижче фрагментів коду в Powershell.
Оберіть, чи хочете ви застосувати цю зміну на загальносистемному рівні (потрібно запустити Powershell з правами адміністратора)
або лише для вашого користувача, і **переконайтесь, що фрагмент коду вказує на місце, де лежить ваша копія Zig**.
`;` перед `C:` не є опечаткою.

По всій системі (Powershell **з правами адміністратора**):
```
[Environment]::SetEnvironmentVariable(
   "Path",
   [Environment]::GetEnvironmentVariable("Path", "Machine") + ";C:\your-path\zig-windows-x86_64-your-version",
   "Machine"
)
```

На рівню одного користувача (Powershell):
```
[Environment]::SetEnvironmentVariable(
   "Path",
   [Environment]::GetEnvironmentVariable("Path", "User") + ";C:\your-path\zig-windows-x86_64-your-version",
   "User"
)
```
Після завершення перезапустіть Powershell.

### Налаштування PATH на Linux, macOS, BSD
Додайте розташування вашого двійкового файлу zig до змінної середовища PATH.

Зазвичай це робиться шляхом додавання рядка експорту до сценарію запуску оболонки (`.profile`, `.zshrc`, ...)
```bash
export PATH=$PATH:~/path/to/zig
```
Після того, як ви закінчите, або `source` файл запуску, або перезапустіть оболонку.




## [Менеджери пакетів]($heading.id('managers'))
### Windows
**WinGet**  
Zig доступний на [WinGet](https://github.com/microsoft/winget-pkgs/tree/master/manifests/z/zig/zig).
```
winget install -e --id zig.zig
```

**Chocolatey**  
Zig доступний на [Chocolatey](https://chocolatey.org/packages/zig).
```
choco install zig
```

**Scoop**  
Zig доступний на [Scoop](https://scoop.sh/#/apps?q=zig&id=7e124d6047c32d426e4143ab395d863fc9d6d491).
```
scoop install zig
```
Latest [dev build](https://scoop.sh/#/apps?q=zig&id=921df07e75042de645204262e784a17c2421944c):
```
scoop bucket add versions
scoop install versions/zig-dev
```

### macOS

**Homebrew**  
Реліз з останнім тегом
```
brew install zig
```

**MacPorts**
```
sudo port install zig
```
### Linux
Zig також присутній у багатьох менеджерах пакетів для Linux. [Тут](https://github.com/ziglang/zig/wiki/Install-Zig-from-a-Package-Manager)
ви можете знайти оновлений список, але майте на увазі, що деякі пакунки можуть містити застарілі версії Zig.

## [Зібрати з вихідного коду]($heading.id('source'))
[Тут](https://github.com/ziglang/zig/wiki/Building-Zig-From-Source) 
ви можете знайти більше інформації про те, як зібрати Zig з вихідного коду для Linux, macOS і Windows.

# Рекомендовані інструменти
## Підсвітка синтаксису та LSP
Усі основні текстові редактори підтримують підсвічування синтаксису для Zig.
Деякі комплектують його, інші вимагають встановлення плагіна. 

Якщо ви зацікавлені в глибшій інтеграції між Zig і вашим редактором,
зверніть увагу на [zigtools/zls](https://github.com/zigtools/zls).

Якщо вас цікавить, що ще доступно, відвідайте секцію[Інструменти](tools).


# Запустіть Hello World
Якщо ви правильно завершили процес інсталяції, тепер ви зможете викликати компілятор Zig зі своєї оболонки.
Давайте перевіримо це, створивши вашу першу програму Zig!

Перейдіть до каталогу ваших проектів і запустіть:
```bash
mkdir hello-world
cd hello-world
zig init
```

Це має вивести:
```
info: created build.zig
info: created build.zig.zon
info: created src/main.zig
info: created src/root.zig
info: see `zig build --help` for a menu of options
```

Запуск `zig build run` повинен потім скомпілювати виконуваний файл і запустити його, в результаті чого:
```
All your codebase are belong to us.
Run `zig build test` to run the tests.
```

Вітаємо, Ви успішно встановили Zig!

# Наступні кроки
**Перегляньте інші ресурси, представлені в секції [Вчитися](/learn)**, переконайтеся, що знайшли документацію для вашої версії
Zig (примітка: для нічних збірок слід використовувати документації з тегом `master`) подумайте про те, щоб прочитати [zig.guide](https://zig.guide).

Zig — це молодий проект, і, на жаль, у нас ще немає можливостей для створення великої документації та навчання
матеріалів для всього, тому ви повинні розглянути [вступ до однієї зі спільнот Zig](https://github.com/ziglang/zig/wiki/Community)
щоб отримати допомогу, коли ви застрягли, а також звернути увагу на такі ініціативи як [Zig SHOWTIME](https://zig.show).

Нарешті, якщо вам подобається Zig і ви хочете допомогти пришвидшити розробку, [подумайте про пожертвування Zig Software Foundation](/zsf)
<img src="/heart.svg" style="vertical-align:middle; margin-right: 5px">.