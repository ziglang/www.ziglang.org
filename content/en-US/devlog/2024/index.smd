---
.title = "Devlog",
.author = "",
.date = @date("2024-08-07T00:00:00"),
.layout = "devlog.shtml",
// When archiving this devlog, remember to disable
// RSS feed generation, as only the current year page
// should be generating a feed.
.alternatives = [{
	.layout = "devlog.xml",
	.output = "devlog/index.xml",
}],
.custom = {
	"mobile_menu_title": "Devlog",
},
// Every entry is a block of markdown content that 
// starts with a $section heading.
// The $section.id is the date of the new micro-post.
// It will also be used as the unique identifier for your
// new entry both in HTML (as the fragment value) and in
// the RSS feed.
// If you want to publish more than one entry in the same
// day, add hours, minutes and seconds to the id value.
// If you get a date parsing error on build, you messed up
// the date syntax.
// You can look at this page's '.date' frontmatter field for
// an example of a correct date string.
---

# [New Devlog Structure]($section.id('2024-09-30'))
Author: Loris Cro

The devlog has switched to a per-year pre-sharded structure to avoid the issue of 
having a page that grows indefinitely.

**NOTE:** the RSS feed link has not changed. No action needed from RSS feed
consumers. Cached links to older entries might become stale, but new entries from
now on will have the correct link.  


If you want to get a similar setup going for your personal blog, check out 
[https://github.com/kristoff-it/zine-devlog-examples](https://github.com/kristoff-it/zine-devlog-examples)

# [loongarch64 added to the download page]($section.id('2024-09-24'))

Author: Andrew Kelley

Thanks to contributions from [YANG Xudong](https://github.com/yxd-ym) and
[Alex Rønne Petersen](https://www.alexrp.com/), along with
[upgrading to LLVM 19](https://github.com/ziglang/zig/commit/c6ad4521c77372cb52adfb9a52b0854d830fed9c),
loongarch64 support in Zig is progressed enough that
[zig-bootstrap](https://github.com/ziglang/zig-bootstrap) works for this
target. In celebration, I have added loongarch64-linux to [the download
page](/download/).

# [2024-09-16]($section.id('2024-09-16'))

Author: Andrew Kelley

I've been porting stb_truetype.h to Zig on the side. Check out this snippet:

```c
{
    float sum = 0;
    for (i=0; i < result->w; ++i) {
      float k;
      int m;
      sum += scanline2[i];
      k = scanline[i] + sum;
      k = (float) STBTT_fabs(k)*255 + 0.5f;
      m = (int) k;
      if (m > 255) m = 255;
      result->pixels[j*result->stride + i] = (unsigned char) m;
    }
}
```
⬇️
```zig
{
    var sum: f32 = 0;
    for (scanline, scanline2, result.pixels[j*result.stride..][0..result.w]) |s, s2, *p| {
        sum += s2;
        p.* = @min(@abs(s + sum)*255 + 0.5, 255);
    }
}
```

Ahh, much better.

# [Zig tokenizer updated to use labeled switch statements]($section.id('2024-09-11'))

Author: Andrew Kelley

Now that Matthew landed [labeled switch continue syntax](https://github.com/ziglang/zig/pull/21257), it's time
to start using it.

[Eric Petersen swooped in for a first-time contribution](https://github.com/ziglang/zig/pull/21367),
updating Zig's tokenizer to use the new syntax, measuring a 13% wall time
performance increase for the `zig ast-check` command:

![](perf.png "perf benchmark screenshot")

This line of code tickles me:

```zig
state: switch (State.start) {
```
