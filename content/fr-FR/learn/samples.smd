---
.title = "Exemples",
.author = "",
.date = @date("2024-08-07:00:00:00"),
.layout = "page.shtml",
.custom = {
	"mobile_menu_title": "Samples",
	"toc": true,
},
---

# [Hello world]($heading.id('hello'))
Un exemple minimal affichant "Hello world".

[]($code.language('=html').buildAsset("samples/hello-world.zig"))

# [Utilisation de librairies externes]($heading.id('ext'))
Toutes les fonctions dans API système peuvent être appellées de cette manière. Il n'y a pas besion d'interface spécifique. 

[]($code.language('=html').buildAsset("samples/windows-msgbox.zig"))

# [Détection de fuites de mémoire]($heading.id('leak'))
Avec `std.heap.GeneralPurposeAllocator`, on peut suivre les libérations mémoire en double et les fuites de mémoires.

[]($code.language('=html').buildAsset("samples/memory-leak.zig"))


# [Interopérabilité avec le C ]($heading.id('c-interop'))

Voici une example d'utilisation d'un header en C et d'un linkage avec libc et raylib.

[]($code.language('=html').buildAsset("samples/c-interop.zig"))


# [Zigg Zagg]($heading.id('zigg-zagg'))
Zig est *optimisé* pour les entretiens d'embauches (en fait, non).

[]($code.language('=html').buildAsset("samples/ziggzagg.zig"))


# [Types génériques]($heading.id('generic'))
En Zig, les types sont des valeures "comptime" et l'on peut utiliser dese fonctions qui retournent un type pour implémenter des algorithmes génériques, mais aussi des structures de données.
Par exemple, voici une implémentation simple d'une file d'attente avec des tests.

[]($code.language('=html').buildAsset("samples/generic-type.zig"))

# [Utilisation de cURL depuis Zig]($heading.id('curl'))

[]($code.language('=html').buildAsset("samples/curl.zig"))
