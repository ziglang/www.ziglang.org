---
.title = "시작하기",
.author = "",
.date = @date("2024-08-07:00:00:00"),
.layout = "page.shtml",
.custom = {
	"mobile_menu_title": "시작하기",
	"toc": true,
},
---

# 정식 릴리스 vs. 나이틀리 빌드

Zig has not yet reached v1.0 and the current release cycle is tied to new releases of LLVM, which have a ~6 months cadence.
In practical terms, **Zig releases tend to be far apart and eventually become stale given the current speed of development**.

It's fine to evaluate Zig using a tagged version, but if you decide that you like Zig and 
want to dive deeper, **we encourage you to upgrade to a nightly build**, mainly because 
that way it will be easier for you to get help: most of the community and sites like 
[zig.guide](https://zig.guide) track the master branch for the reasons stated above.

The good news is that it's very easy to switch from one Zig version to another, or even have multiple versions present on the system at the same time: Zig releases are self-contained archives that can be placed anywhere in your system.


# Zig 설치하기

## [직접 다운로드하기]($heading.id('direct'))

Zig를 설치할 수 있는 가장 간단한 방법은 [다운로드](/download) 페이지에서 Zig 컴파일러 및 라이브러리가 포함된 압축 파일을 직접 다운로드하고
적절한 디렉토리에 압축 해제한 다음, `zig` 명령어를 어디에서나 실행할 수 있도록 `PATH` 환경 변수에 Zig 컴파일러의 경로를 추가하는 것입니다.

### Windows에서 PATH 환경 변수 설정하기
To setup your path on Windows run **one** of the following snippets of code in a Powershell instance.
Choose if you want to apply this change on a system-wide level (requires running Powershell with admin privileges)
or just for your user, and **make sure to change the snippet to point at the location where your copy of Zig lies**.
The `;` before `C:` is not a typo.

System wide (**admin** Powershell):
```
[Environment]::SetEnvironmentVariable(
   "Path",
   [Environment]::GetEnvironmentVariable("Path", "Machine") + ";C:\your-path\zig-windows-x86_64-your-version",
   "Machine"
)
```

User level (Powershell):
```
[Environment]::SetEnvironmentVariable(
   "Path",
   [Environment]::GetEnvironmentVariable("Path", "User") + ";C:\your-path\zig-windows-x86_64-your-version",
   "User"
)
```
After you're done, restart your Powershell instance.

### Linux, macOS와 BSD에서 PATH 환경 변수 설정하기

Add the location of your zig binary to your PATH environment variable.

This is generally done by adding an export line to your shell startup script (`.profile`, `.zshrc`, ...)
```bash
export PATH=$PATH:~/path/to/zig
```
After you're done, either `source` your startup file or restart your shell.




## [패키지 관리자]($heading.id('managers'))

### Windows

**WinGet**  
Zig를 [WinGet](https://github.com/microsoft/winget-pkgs/tree/master/manifests/z/zig/zig)으로 설치하기 위한 명령어입니다.
```
winget install -e --id zig.zig
```

**Chocolatey**  
Zig를 [Chocolatey](https://chocolatey.org/packages/zig)로 설치하기 위한 명령어입니다.
```
choco install zig
```

**Scoop**  
Zig의 정식 릴리스를 [Scoop](https://scoop.sh/#/apps?q=zig&id=7e124d6047c32d426e4143ab395d863fc9d6d491)으로 설치하기 위한 명령어입니다.
```
scoop install zig
```

최신 버전의 [개발자 빌드](https://scoop.sh/#/apps?q=zig&id=921df07e75042de645204262e784a17c2421944c) 설치를 위한 명령어:
```
scoop bucket add versions
scoop install versions/zig-dev
```

### macOS

**Homebrew**  
최신 버전의 정식 릴리스:
```
brew install zig
```

**MacPorts**
```
port install zig
```

### Linux

Zig is also present in many package managers for Linux. [Here](https://github.com/ziglang/zig/wiki/Install-Zig-from-a-Package-Manager)
you can find an updated list but keep in mind that some packages might bundle outdated versions of Zig.

## [소스 코드로부터 직접 빌드하기]($heading.id('source'))
Linux, macOS와 Windows에서 Zig를 소스 코드로부터 직접 빌드하는 방법은 [여기](https://github.com/ziglang/zig/wiki/Building-Zig-From-Source)에서 확인하실 수 있습니다.

# 추천 도구

## 구문 강조 기능과 LSP
All major text editors have syntax highlight support for Zig. 
Some bundle it, some others require installing a plugin.  

If you're interested in a deeper integration between Zig and your editor, 
checkout [zigtools/zls](https://github.com/zigtools/zls).

If you're interested in what else is available, checkout the [Tools](tools) section.

# Hello World 프로그램 실행하기
설치 과정을 잘 따라오셨다면, 셸에서 Zig 컴파일러를 실행하실 수 있을 것입니다.  
여러분의 첫 번째 Zig 프로그램을 통해 컴파일러가 제대로 설치되었는지 확인해봅시다!

프로젝트 생성을 위한 적절한 디렉토리로 이동하여 아래 명령어를 실행해주세요:

```bash
mkdir hello-world
cd hello-world
zig init
```

그러면 아래와 같은 출력 결과를 확인하실 수 있습니다:
```
info: created build.zig
info: created build.zig.zon
info: created src/main.zig
info: created src/root.zig
info: see `zig build --help` for a menu of options
```

이 상태에서 `zig build run` 명령어를 입력하시면 실행 파일이 자동으로 빌드 및 실행되고, 아래와 같은 결과가 나오게 됩니다:

```
All your codebase are belong to us.
Run `zig build test` to run the tests.
```

축하드립니다, Zig 컴파일러 설치를 완료하셨습니다!  

# 그 다음으로 할 일

**[배우기](/learn) 페이지에 있는 학습 자료를 확인해보시고,** 방금 설치하신 Zig 버전에 대한 개발 문서와 (참고: 나이틀리 빌드를 사용하시는 경우 `master` 개발 문서를 이용하셔야 합니다) [zig.guide](https://zig.guide)에 있는 내용을 한번 읽어보시는 것을 추천드립니다.

Zig is a young project and unfortunately we don't have yet the capacity to produce extensive documentation and learning
materials for everything, so you should consider [joining one of the existing Zig communities](https://github.com/ziglang/zig/wiki/Community)
to get help when you get stuck, as well as checking out initiatives like [Zig SHOWTIME](https://zig.show).

마지막으로, Zig 프로그래밍 언어의 개발 능률 향상에 기여하고 싶으시다면, [Zig Software Foundation을 후원해주세요](/zsf)
<img src="/heart.svg" style="vertical-align:middle; margin-right: 5px">.
