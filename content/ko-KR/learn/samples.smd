---
.title = "Samples",
.author = "",
.date = @date("2024-08-07:00:00:00"),
.layout = "page.shtml",
.custom = {
	"mobile_menu_title": "Samples",
	"toc": true,
},
---

# [Calling external library functions]($heading.id('ext'))
All system API functions can be invoked this way, you do not need library bindings to interface them.

[]($code.language('=html').buildAsset("samples/0-windows-msgbox.zig"))

# [Memory leak detection]($heading.id('leak'))
Using `std.heap.GeneralPurposeAllocator` you can track double frees and memory leaks.

[]($code.language('=html').buildAsset("samples/1-memory-leak.zig"))


# [C interoperability]($heading.id('c-interop'))
Example of importing a C header file and linking to both libc and raylib.

[]($code.language('=html').buildAsset("samples/2-c-interop.zig"))


# [Zigg Zagg]($heading.id('zigg-zagg'))
Zig is *optimized* for coding interviews (not really).

[]($code.language('=html').buildAsset("samples/3-ziggzagg.zig"))


# [Generic Types]($heading.id('generic'))
In Zig types are comptime values and we use functions that return a type to implement generic algorithms and data structures. In this example we implement a simple generic queue and test its behaviour.

[]($code.language('=html').buildAsset("samples/4-generic-type.zig"))


# [Using cURL from Zig]($heading.id('curl'))

[]($code.language('=html').buildAsset("samples/5-curl.zig"))
