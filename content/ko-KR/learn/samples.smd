---
.title = "예제 코드",
.author = "",
.date = @date("2024-08-07:00:00:00"),
.layout = "page.shtml",
.custom = {
	"mobile_menu_title": "예제 코드",
	"toc": true,
},
---

# [Hello, world!]($heading.id('hello'))

"hello world!"를 출력하는 간단한 예제 코드입니다.

[]($code.language('=html').buildAsset("samples/hello-world.zig"))

# [외부 라이브러리 함수 호출하기]($heading.id('ext'))

모든 시스템 API 함수는 아래와 같은 방법으로 호출할 수 있으며, 별도의 라이브러리 바인딩은 필요하지 않습니다.

[]($code.language('=html').buildAsset("samples/windows-msgbox.zig"))

# [메모리 누수 탐지하기]($heading.id('leak'))

`std.heap.GeneralPurposeAllocator`를 사용하면 메모리의 중복 해제와 메모리 누수 여부를 추적할 수 있습니다.

[]($code.language('=html').buildAsset("samples/memory-leak.zig"))


# [C와의 상호운용성]($heading.id('c-interop'))

아래 예제 코드에서는 C 헤더 파일을 불러오고 libc와 raylib 라이브러리를 링크합니다.

[]($code.language('=html').buildAsset("samples/c-interop.zig"))


# [Zigg Zagg]($heading.id('zigg-zagg'))
Zig는 코딩 인터뷰에 *최적화*된 프로그래밍 언어입니다 (그렇지 않을지도...?).

[]($code.language('=html').buildAsset("samples/ziggzagg.zig"))


# [제너릭 타입]($heading.id('generic'))

Zig의 모든 자료형은 컴파일 타임에 결정되는 값이므로, 자료형을 반환하는 함수를 이용하여 제너릭한 알고리즘과 자료 구조를 구현할 수 있습니다. 아래 예제에서는 간단한 제너릭 큐를 구현하고 큐가 제대로 동작하는지 테스트해봅니다.

[]($code.language('=html').buildAsset("samples/generic-type.zig"))


# [Zig에서 cURL 사용하기]($heading.id('curl'))

[]($code.language('=html').buildAsset("samples/curl.zig"))
