---
.title = "Esempi",
.author = "",
.date = @date("2024-08-07:00:00:00"),
.layout = "page.shtml",
.custom = {
	"mobile_menu_title": "Esempi",
	"toc": true,
},
---

# [Chiamare funzioni da librerie esterne]($heading.id('ext'))
Tutte le funzioni delle API di sistema possono essere invocate in questo modo, non sono necessari binding per interfacciarsi ad esse.

[]($code.language('=html').buildAsset("samples/0-windows-msgbox.zig"))


# [Rilevamento di memory leak]($heading.id('leak'))
Usando `std.heap.GeneralPurposeAllocator` puoi tracciare i double free e i memory leak.

[]($code.language('=html').buildAsset("samples/1-memory-leak.zig"))


# [Interoperabilità con C]($heading.id('c-interop'))
Questo esempio importa un file di intestazione C e fa il link di `libc` e `raylib`.

[]($code.language('=html').buildAsset("samples/2-c-interop.zig"))


# [Zigg Zagg]($heading.id('zigg-zagg'))
Zig è *ottimizzato* per i colloqui tecnici (non proprio).

[]($code.language('=html').buildAsset("samples/3-ziggzagg.zig"))


# [Tipi generici]($heading.id('generic'))
In Zig i tipi di dato sono valori conosciuti in fase di compilazione, e utilizziamo funzioni che restituiscono tipi per implementare algoritmi generici e strutture dati. In questo esempio implementiamo una semplice coda generica e testiamo il suo funzionamento.

[]($code.language('=html').buildAsset("samples/4-generic-type.zig"))


# [Usare cURL da Zig]($heading.id('curl'))

[]($code.language('=html').buildAsset("samples/5-curl.zig"))
