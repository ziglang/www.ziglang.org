---
.title = "Panoramica",
.author = "",
.date = @date("2024-08-07:00:00:00"),
.layout = "page.shtml",
.custom = {
	"mobile_menu_title": "Panoramica",
},
---
# Caratteristiche di rilievo
## [Un linguaggio piccolo e semplice]($heading.id('small-simple-language'))

Concentrati sul debuggare la tua applicazione, invece di debuggare la tua conoscenza del linguaggio di programmazione.

L'intera sintassi di Zig è specificata con un [file di grammatica PEG di 580 righe](https://ziglang.org/documentation/master/#Grammar).

Non c'è **nessun controllo nascosto del flusso di esecuzione**, nessuna allocazione dinamica nascosta, nessun preprocessore e nessuna macro. Se vedi del codice Zig e non sembra che stia chiamando una funzione, allora non lo sta facendo. Questo significa che il seguente codice chiamerà sicuramente solo `foo()` e poi `bar()`, e questo è garantito anche senza conoscere i tipi di dato utilizzati:

```zig
var a = b + c.d;
foo();
bar();
```

Esempi di controllo nascosto del flusso di esecuzione:

- D ha le funzioni `@property`, ovvero metodi che possono essere chiamati in un modo che sembra l'accesso a un attributo. Quindi, nell'esempio sopra, `c.d` potrebbe chiamare una funzione.
- C++, D e Rust supportano l'overload degli operatori, quindi l'operatore `+` potrebbe chiamare una funzione.
- C++, D e Go hanno eccezioni throw/catch, quindi `foo()` potrebbe lanciare un'eccezione, e impedire l'esecuzione di `bar()`.

Zig promuove la manutenibilità e leggibilità del codice permettendo di gestire il flusso di esecuzione esclusivamente con le parole chiave del linguaggio e le chiamate di funzioni.

## [Prestazioni e sicurezza: scegline due]($heading.id('performance-and-safety-choose-two'))

Zig ha quattro [modalità di build](https://ziglang.org/documentation/master/#Build-Mode), che possono essere mescolate tra di loro e specificare la modalità di qualunque [blocco o ambito di visibilità](https://ziglang.org/documentation/master/#setRuntimeSafety).

| Parametro | [Debug](https://ziglang.org/documentation/master/#Debug) | [ReleaseSafe](https://ziglang.org/documentation/master/#ReleaseSafe) | [ReleaseFast](https://ziglang.org/documentation/master/#ReleaseFast) | [ReleaseSmall](https://ziglang.org/documentation/master/#ReleaseSmall) |
|-----------|-------|-------------|-------------|--------------|
Ottimizzazioni - migliora prestazioni, peggiora debug e tempo di compilazione | | -O3 | -O3| -Os |
Controlli di sicurezza a runtime - peggiora prestazioni e dimensioni, crash invece di comportamenti non definiti (UB) | On | On | | |

Ecco come l'[overflow di interi](https://ziglang.org/documentation/master/#Integer-Overflow) appare in fase di compilazione, a prescindere dalla modalità di build:

[]($code.language('=html').buildAsset('features/1-integer-overflow.zig'))

Ecco come appare durante l'esecuzione, nelle build con controlli di sicurezza attivi:

[]($code.language('=html').buildAsset('features/2-integer-overflow-runtime.zig'))


Questi [stack trace funzionano su tutte le piattaforme](#stack-traces-on-all-targets), incluse quelle [freestanding](https://andrewkelley.me/post/zig-stack-traces-kernel-panic-bare-bones-os.html).

Con Zig puoi fare affidamento sulla modalità di build sicura, e disattivare selettivamente alcuni dei controlli di sicurezza se e dove sono necessarie maggiori prestazioni. Per esempio, il codice mostrato nell'esempio precedente può essere modificato in questo modo:

[]($code.language('=html').buildAsset('features/3-undefined-behavior.zig'))

Zig usa i [comportamenti non definiti](https://ziglang.org/documentation/master/#Undefined-Behavior) come strumento estremamente preciso per prevenire bug e migliorare le prestazioni.

A proposito di prestazioni, Zig è più veloce rispetto a C.

- L'implementazione di riferimento usa LLVM come backend per applicare lo stato dell'arte delle ottimizzazioni.
- Ciò che altri progetti chiamano "Link Time Optimization", Zig lo fa in automatico.
- Per la piattaforma native vengono abilitate le funzioni avanzate della CPU (`-march=native`), grazie al fatto che [la cross-compilazione è un caso d'uso primario](#cross-compiling-is-a-first-class-use-case).
- Comportamenti non definiti (UB) accuratamente selezionati. Per esempio, in Zig sia gli interi con segno che quelli unsigned hanno comportamenti non definiti in caso di overflow, in contrasto a C dove ciò è vero solo per gli interi con segno. Questo [facilita delle ottimizzazioni non disponibili in C](https://godbolt.org/z/n_nLEU).
- Zig espone direttamente un [tipo di vettore SIMD](https://ziglang.org/documentation/master/#Vectors), che rende semplice scrivere codice vettorizzato portabile.

Zig non è un linguaggio completamente sicuro. Per chi fosse interessato ad approfondire il tema della sicurezza in Zig, tieni d'occhio le seguenti discussioni:

- [enumerate all kinds of undefined behavior, even that which cannot be safety-checked](https://github.com/ziglang/zig/issues/1966)
- [make Debug and ReleaseSafe modes fully safe](https://github.com/ziglang/zig/issues/2301)

## Zig compete con C invece di dipendere da C

La libreria standard di Zig comunica con libc, ma può farne a meno. Ecco un "hello world":

[]($code.language('=html').buildAsset('features/4-hello.zig'))

Quando compilato con `-O ReleaseSmall`, senza simboli di debug, in modalità single-thread, il seguente codice produce un eseguibile statico di 9.8 KiB per la piattaforma x86_64-linux:
```
$ zig build-exe hello.zig -O ReleaseSmall -fstrip -fsingle-threaded
$ wc -c hello
9944 hello
$ ldd hello
  not a dynamic executable
```

Una build per Windows è persino più piccola, occupando solo 4096 byte:
```
$ zig build-exe hello.zig -O ReleaseSmall -fstrip -fsingle-threaded -target x86_64-windows
$ wc -c hello.exe
4096 hello.exe
$ file hello.exe
hello.exe: PE32+ executable (console) x86-64, for MS Windows
```

## Dichiarazioni di alto livello indipendenti dall'ordine

Le dichiarazioni di alto livello come le variabili globali sono visibili indipendentemente dall'ordine con cui appaiono nel codice, e sono analizzate in modo lazy. I valori usati per inizializzare le variabili globali sono [valutati in fase di compilazione](#compile-time-reflection-and-compile-time-code-execution).

[]($code.language('=html').buildAsset('features/5-global-variables.zig'))

## Tipi opzionali invece di puntatori nulli

In altri linguaggi di programmazione, i riferimenti nulli sono la causa di molte eccezioni a runtime, e sono persino accusati di essere [il più grave errore delle scienze informatiche](https://www.lucidchart.com/techblog/2015/08/31/the-worst-mistake-of-computer-science/).

In Zig, di base i puntatori non possono essere nulli:

[]($code.language('=html').buildAsset('features/6-null-to-ptr.zig'))

Ciononostante, ogni tipo di dato può essere reso un [tipo opzionale](https://ziglang.org/documentation/master/#Optionals) anteponendo un `?`:

[]($code.language('=html').buildAsset('features/7-optional-syntax.zig'))

Per estrarre il valore da un tipo opzionale (unwrapping), si può usare `orelse` per fornire un valore di default:

[]($code.language('=html').buildAsset('features/8-optional-orelse.zig'))

In alternativa si può usare un `if`:

[]($code.language('=html').buildAsset('features/9-optional-if.zig'))

La stessa sintassi funziona con [while](https://ziglang.org/documentation/master/#while):

[]($code.language('=html').buildAsset('features/10-optional-while.zig'))

## Gestione manuale della memoria

Una libreria scritta in Zig è adatta a qualunque contesto:

- [Applicazioni desktop](https://github.com/TM35-Metronome/)
- Server a bassa latenza
- [Kernel di sistemi operativi](https://github.com/AndreaOrru/zen)
- [Sistemi embedded](https://github.com/skyfex/zig-nrf-demo/)
- Software real-time, come performance live, aeroplani, pacemaker
- [In browser web o plugin con WebAssembly](https://shritesh.github.io/zigfmt-web/)
- Utilizzo da altri linguaggi di programmazione, mediante l'ABI di C

Per permettere questo risultato, i programmatori Zig devono gestire manualmente la memoria, e devono gestire gli errori di allocazione.

Questo vale anche per la libreria standard di Zig. Ogni funzione che necessita di allocazioni dinamiche accetta come parametro un allocatore. Per questo motivo, la libreria standard di Zig può essere utilizzata anche su piattaforme hardware.

In aggiunta a [un nuovo approccio alla gestione degli errori](#a-fresh-take-on-error-handling), Zig fornisce [defer](https://ziglang.org/documentation/master/#defer) e [errdefer](https://ziglang.org/documentation/master/#errdefer) per rendere tutta la gestione di risorse - non solo la memoria - semplice e facilmente verificabile.

Per un esempio di `defer`, vedi la sezione [Integrazione con librerie C senza FFI/binding](#integration-with-c-libraries-without-ffibindings). Ecco un esempio di utilizzo di `errdefer`:
[]($code.language('=html').buildAsset('features/11-errdefer.zig'))


## [Un nuovo approccio alla gestione degli errori]($heading.id('a-fresh-take-on-error-handling'))

Gli errori sono valori, e non possono essere ignorati:

[]($code.language('=html').buildAsset('features/12-errors-as-values.zig'))

Gli errori possono essere gestiti con [catch](https://ziglang.org/documentation/master/#catch):

[]($code.language('=html').buildAsset('features/13-errors-catch.zig'))

La parola chiave [try](https://ziglang.org/documentation/master/#try) è un'abbreviazione di `catch |err| return err`:

[]($code.language('=html').buildAsset('features/14-errors-try.zig'))

Nota che questa è un [Error Return Trace](https://ziglang.org/documentation/master/#Error-Return-Traces), non uno [stack trace](#stack-traces-on-all-targets). Il codice non ha dovuto pagare il prezzo dell'unwinding dello stack per ottenere queste informazioni.

La parola chiave [switch](https://ziglang.org/documentation/master/#switch) usata su un errore garantisce che tutti i possibili errori siano gestiti:

[]($code.language('=html').buildAsset('features/15-errors-switch.zig'))

La parola chiave [unreachable](https://ziglang.org/documentation/master/#unreachable) viene usata per dichiarare che non si verificherà alcun errore:

[]($code.language('=html').buildAsset('features/16-unreachable.zig'))

Nelle build senza controlli di sicurezza, questo risulterà un [comportamento non definito](#performance-and-safety-choose-two), quindi assicurati di usare `unreachable` solo quando hai la certezza che un'operazione avrà successo.

### [Stack trace su ogni piattaforma]($heading.id('stack-traces-on-all-targets'))

I stack trace e gli [error return trace](https://ziglang.org/documentation/master/#Error-Return-Traces) mostrati in questa pagina funzionano su tutte le piattaforme con supporto Tier 1 e alcune con supporto Tier 2. [Persino piattaforme hardware](https://andrewkelley.me/post/zig-stack-traces-kernel-panic-bare-bones-os.html)!

Inoltre, la libreria standard permette di catturare uno stack trace in qualunque punto del programma e inviarlo al canale *standard error* in un secondo momento:

[]($code.language('=html').buildAsset('features/17-stack-traces.zig'))

Puoi vedere un utilizzo di questa tecnica nel progetto [GeneralPurposeDebugAllocator](https://github.com/andrewrk/zig-general-purpose-allocator/#current-status).

## Strutture dati generiche e funzioni

I tipi di dato sono valori che devono essere conosciuti in fase di compilazione.

[]($code.language('=html').buildAsset('features/18-types.zig'))

Una struttura dati generica è semplicemente una funzione che restituisce un valore di tipo `type`:

[]($code.language('=html').buildAsset('features/19-generics.zig'))

## [Riflessione ed esecuzione in fase di compilazione]($heading.id('compile-time-reflection-and-compile-time-code-execution'))

La funzione *builtin* [@typeInfo](https://ziglang.org/documentation/master/#typeInfo) permette la riflessione:

[]($code.language('=html').buildAsset('features/20-reflection.zig'))

La libreria standard di Zig usa questa tecnica per implementare l'output di stringhe formattate. Nonostante il [linguaggio sia piccolo e semplice](#small-simple-language), questa funzione è implementata interamente in Zig. Nel frattempo, in C, gli errori di compilazione per `printf` sono *hard-coded*, scritti direttamente nel compilatore. Similmente, in Rust, la funzione equivalente è una macro implementata direttamente nel compilatore.

Zig può anche valutare funzioni e blocchi di codice in fase di compilazione. In alcuni contesti, come l'inizializzazione di variabili globali, le espressioni sono implicitamente valutate in fase di compilazione. In alternativa, la parola chiave [comptime](https://ziglang.org/documentation/master/#comptime) permette di eseguire esplicitamente una porzione di codice in fase di compilazione. Può essere estremamente utile se combinato con le asserzioni:

[]($code.language('=html').buildAsset('features/21-comptime.zig'))

## [Integrazione con librerie C senza FFI/bindings]($heading.id('integration-with-c-libraries-without-ffibindings'))

[@cImport](https://ziglang.org/documentation/master/#cImport) importa direttamente tipi, variabili, funzioni e macro semplici, permettendone l'utilizzo in Zig. Traduce persino le funzioni `inline` da C a Zig.

Il seguente esempio emette un'onda sonora sinusoidale utilizzando [libsoundio](http://libsound.io/):

<u>sine.zig</u>
[]($code.language('=html').buildAsset('features/22-sine-wave.zig'))

```
$ zig build-exe sine.zig -lsoundio -lc
$ ./sine
Output device: Built-in Audio Analog Stereo
^C
```

[Questo codice Zig è molto più semplice dell'equivalente C](https://gist.github.com/andrewrk/d285c8f912169329e5e28c3d0a63c1d8), oltre ad avere migliori controlli sugli errori, e tutto questo è stato ottenuto importando direttamente un file di intestazione C - senza binding delle API.

*Zig usa le librerie C meglio di quanto C usa le librerie C.*

### [Zig è anche un compilatore C]($heading.id('zig-is-also-a-c-compiler'))

Ecco un esempio di come Zig compila del codice C:

<u>hello.c</u>
```c
#include <stdio.h>

int main(int argc, char **argv) {
    printf("Hello world\n");
    return 0;
}
```

```
$ zig build-exe hello.c --library c
$ ./hello
Hello world
```

Puoi usare `--verbose-cc` per vedere il comando eseguito dal compilatore C:
```
$ zig build-exe hello.c --library c --verbose-cc
zig cc -MD -MV -MF .zig-cache/tmp/42zL6fBH8fSo-hello.o.d -nostdinc -fno-spell-checking -isystem /home/andy/dev/zig/build/lib/zig/include -isystem /home/andy/dev/zig/build/lib/zig/libc/include/x86_64-linux-gnu -isystem /home/andy/dev/zig/build/lib/zig/libc/include/generic-glibc -isystem /home/andy/dev/zig/build/lib/zig/libc/include/x86_64-linux-any -isystem /home/andy/dev/zig/build/lib/zig/libc/include/any-linux-any -march=native -g -fstack-protector-strong --param ssp-buffer-size=4 -fno-omit-frame-pointer -o .zig-cache/tmp/42zL6fBH8fSo-hello.o -c hello.c -fPIC
```

Nota che eseguendo di nuovo il comando, non c'è alcun output, e la compilazione è istantanea:
```
$ time zig build-exe hello.c --library c --verbose-cc

real	0m0.027s
user	0m0.018s
sys	0m0.009s
```

Questo è possibile grazie al [caching dei risultati di compilazione](https://ziglang.org/download/0.4.0/release-notes.html#Build-Artifact-Caching). Zig legge automaticamente il file `.d` e usa un robusto sistema di caching per evitare di rifare lavoro non necessario.

Non solo Zig può compilare codice C, ma ci sono anche ottime ragioni per usare Zig come compilatore C: [Zig integra libc](#zig-ships-with-libc).

### Esporta funzioni, variabili e tipi per permetterne l'uso a C

Uno dei casi d'uso primari di Zig è esportare una libreria con l'ABI di C che possa essere richiamata da altri linguaggi di programmazione. La parola chiave `export` anteposta a funzioni, variabili e tipi di dato, li rende parte dell'API della libreria:

<u>mathtest.zig</u>
[]($code.language('=html').buildAsset('features/23-math-test.zig'))

Per creare una libreria statica:
```
$ zig build-lib mathtest.zig
```

Per creare una libreria dinamica/condivisa:
```
$ zig build-lib mathtest.zig -dynamic
```

Un esempio con il [sistema di build di Zig](#zig-build-system):

<u>test.c</u>
```c
#include "mathtest.h"
#include <stdio.h>

int main(int argc, char **argv) {
    int32_t result = add(42, 1337);
    printf("%d\n", result);
    return 0;
}
```

<u>build.zig</u>
[]($code.language('=html').buildAsset('features/24-build.zig'))

```
$ zig build test
1379
```

## [La cross-compilazione è un caso d'uso primario]($heading.id('cross-compiling-is-a-first-class-use-case'))

Zig può compilare per ognuna delle piattaforme indicate nella tabella di supporto (vedi le note di rilacio dell'ultima versione di Zig) come Tier 3 o superiore. Non è necessario installare alcuna "cross toolchain" o niente di simile. Ecco un Hello World nativo:

[]($code.language('=html').buildAsset('features/4-hello.zig'))

Ora lo compiliamo per `x86_64-windows`, `x86_64-macos` e `aarch64-linux`:
```
$ zig build-exe hello.zig -target x86_64-windows
$ file hello.exe
hello.exe: PE32+ executable (console) x86-64, for MS Windows
$ zig build-exe hello.zig -target x86_64-macos
$ file hello
hello: Mach-O 64-bit x86_64 executable, flags:<NOUNDEFS|DYLDLINK|TWOLEVEL|PIE>
$ zig build-exe hello.zig -target aarch64-linux
$ file hello
hello: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), statically linked, with debug_info, not stripped
```

Questo funziona da qualunque piattaforma Tier 3+, verso qualunque piattaforma Tier 3+.

### [Zig integra libc]($heading.id('zig-ships-with-libc'))

Puoi vedere la lista delle piattaforme supportate da `libc` con il comando `zig targets`:
```
...
 "libc": [
  "aarch64_be-linux-gnu",
  "aarch64_be-linux-musl",
  "aarch64_be-windows-gnu",
  "aarch64-linux-gnu",
  "aarch64-linux-musl",
  "aarch64-windows-gnu",
  "armeb-linux-gnueabi",
  "armeb-linux-gnueabihf",
  "armeb-linux-musleabi",
  "armeb-linux-musleabihf",
  "armeb-windows-gnu",
  "arm-linux-gnueabi",
  "arm-linux-gnueabihf",
  "arm-linux-musleabi",
  "arm-linux-musleabihf",
  "arm-windows-gnu",
  "mips64el-linux-gnuabi64",
  "mips64el-linux-gnuabin32",
  "mips64el-linux-musl",
  "mips64-linux-gnuabi64",
  "mips64-linux-gnuabin32",
  "mips64-linux-musl",
  "mipsel-linux-gnu",
  "mipsel-linux-musl",
  "mips-linux-gnu",
  "mips-linux-musl",
  "powerpc64le-linux-gnu",
  "powerpc64le-linux-musl",
  "powerpc64-linux-gnu",
  "powerpc64-linux-musl",
  "powerpc-linux-gnu",
  "powerpc-linux-musl",
  "riscv64-linux-gnu",
  "riscv64-linux-musl",
  "s390x-linux-gnu",
  "s390x-linux-musl",
  "sparc-linux-gnu",
  "sparcv9-linux-gnu",
  "wasm32-freestanding-musl",
  "x86-linux-gnu",
  "x86-linux-musl",
  "x86-windows-gnu",
  "x86_64-linux-gnu",
  "x86_64-linux-gnux32",
  "x86_64-linux-musl",
  "x86_64-windows-gnu"
 ],
 ```

Questo significa che `--library c` su queste piattaforme *non dipende da alcun file di sistema*!

Diamo nuovamente un'occhiata a quel [Hello World in C](#zig-is-also-a-c-compiler):
```
$ zig build-exe hello.c --library c
$ ./hello
Hello world
$ ldd ./hello
	linux-vdso.so.1 (0x00007ffd03dc9000)
	libc.so.6 => /lib/libc.so.6 (0x00007fc4b62be000)
	libm.so.6 => /lib/libm.so.6 (0x00007fc4b5f29000)
	libpthread.so.0 => /lib/libpthread.so.0 (0x00007fc4b5d0a000)
	libdl.so.2 => /lib/libdl.so.2 (0x00007fc4b5b06000)
	librt.so.1 => /lib/librt.so.1 (0x00007fc4b58fe000)
	/lib/ld-linux-x86-64.so.2 => /lib64/ld-linux-x86-64.so.2 (0x00007fc4b6672000)
```

[glibc](https://www.gnu.org/software/libc/) non supporta la creazione di binari statici, ma [musl](https://www.musl-libc.org/) lo può fare:
```
$ zig build-exe hello.c --library c -target x86_64-linux-musl
$ ./hello
Hello world
$ ldd hello
  not a dynamic executable
```

In questo esempio, Zig ha compilato `musl libc` da sorgente e poi ha linkato ad esso. La build di `musl libc` per `x86_64-linux` rimane disponibile grazie al [sistema di cache](https://ziglang.org/download/0.4.0/release-notes.html#Build-Artifact-Caching), quindi ogni volta che ci sarà nuovamente bisogno di questo `libc` sarà disponibile istantaneamente.

Questo significa che questa funzionalità è disponibile su ogni piattaforma. Gli utenti Windows e macOS possono compilare codice Zig e C, e linkare `libc`, per ognuno dei target elencati sopra. Allo stesso modo, è possibile cross-compilare del codice per altre architetture:
```
$ zig build-exe hello.c --library c -target aarch64-linux-gnu
$ file hello
hello: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, for GNU/Linux 2.0.0, with debug_info, not stripped
```

In un certo senso, Zig compila C meglio dei compilatori C!

Questa funzionalità è più avanzata rispetto alla sola integrazione di uno strumento di cross-compilazione in Zig. Per esempio, la dimensione totale non compressa delle intestazioni libc incluse in Zig è 22 MiB. Allo stesso tempo, gli header di musl libc + header di linux per la sola architettura x86_64 sono in totale 8 MiB, e per glibc sono 3.1 MiB (a glibc mancano gli header linux), eppure Zig al momento include 40 versioni di libc. Includendoli così come sono, sarebbero 444 MiB. Però, grazie a questo [strumento di elaborazione header](https://github.com/ziglang/zig/blob/0.4.0/libc/process_headers.zig), e del [buon vecchio olio di gomito](https://github.com/ziglang/zig/wiki/Updating-libc), gli archivi scaricabili di Zig rimangono a circa 50 Mib totali, nonostante supportino `libc` su tutti questi target, oltre a compiler-rt, libunwind e libcxx, e nonostante sia un compilator  compatibile con Clang. Per fare un confronto, la build per Windows dello stesso Clang (v8.0.0) presa da llvm.org occupa 132 MiB.

Nota che solo i target con supporto Tier 1 sono stati testati in modo esaustivo. Abbiamo già in programma di [aggiungere altri libc](https://github.com/ziglang/zig/issues/514) (anche per Windows), e di [aggiungere copertura dei test per la compilazione con tutte le versioni di libc](https://github.com/ziglang/zig/issues/2058).

It's [planned to have a Zig Package Manager](https://github.com/ziglang/zig/issues/943), but it's not done yet. One of the things that will be possible is to create a package for C libraries. This will make the [Zig Build System](#zig-build-system) attractive for Zig programmers and C programmers alike.

## [Il build system di Zig]($heading.id('zig-build-system'))

Zig ha un proprio sistema di build, quindi non servono `make`, `cmake` o simili.
```
$ zig init-exe
Created build.zig
Created src/main.zig

Ora prova `zig build --help` oppure `zig build run`
```

<u>src/main.zig</u>
[]($code.language('=html').buildAsset('features/25-all-bases.zig'))


<u>build.zig</u>
[]($code.language('=html').buildAsset('features/26-build.zig'))


Diamo un'occhiata a quel menu `--help`:
```
$ zig build --help
Usage: zig build [steps] [options]

Steps:
  install (default)      Copy build artifacts to prefix path
  uninstall              Remove build artifacts from prefix path
  run                    Run the app

General Options:
  --help                 Print this help and exit
  --verbose              Print commands before executing them
  --prefix [path]        Override default install prefix
  --search-prefix [path] Add a path to look for binaries, libraries, headers

Project-Specific Options:
  -Dtarget=[string]      The CPU architecture, OS, and ABI to build for.
  -Drelease-safe=[bool]  optimizations on and safety on
  -Drelease-fast=[bool]  optimizations on and safety off
  -Drelease-small=[bool] size optimizations on and safety off

Advanced Options:
  --build-file [file]         Override path to build.zig
  --cache-dir [path]          Override path to zig cache directory
  --override-lib-dir [arg]    Override path to Zig lib directory
  --verbose-tokenize          Enable compiler debug output for tokenization
  --verbose-ast               Enable compiler debug output for parsing into an AST
  --verbose-link              Enable compiler debug output for linking
  --verbose-ir                Enable compiler debug output for Zig IR
  --verbose-llvm-ir           Enable compiler debug output for LLVM IR
  --verbose-cimport           Enable compiler debug output for C imports
  --verbose-cc                Enable compiler debug output for C compilation
  --verbose-llvm-cpu-features Enable compiler debug output for LLVM CPU features
```

Come vedi uno degli step diponibili è `run`:
```
$ zig build run
All your base are belong to us.
```

Ecco alcuni esempi di build script:

- [Build script di un gioco Tetris in OpenGL](https://github.com/andrewrk/tetris/blob/master/build.zig)
- [Build script di un gioco arcade per Raspberry Pi 3 (solo hardware)](https://github.com/andrewrk/clashos/blob/master/build.zig)
- [Build script del compilatore self-hosted di Zig](https://github.com/ziglang/zig/blob/master/build.zig)

## Concurrency via Async Functions

Zig 0.5.0 [introduced async functions](https://ziglang.org/download/0.5.0/release-notes.html#Async-Functions). This feature has no dependency on a host operating system or even heap-allocated memory. That means async functions are available for the freestanding target.

Zig infers whether a function is async, and allows `async`/`await` on non-async functions, which means that **Zig libraries are agnostic of blocking vs async I/O**. [Zig avoids function colors](http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/).



The Zig Standard Library implements an event loop that multiplexes async functions onto a thread pool for M:N concurrency. Multithreading safety and race detection are areas of active research.

## Vasta gamma di piattaforme supportate

Zig usa un sistema "grado di supporto" per indicare fino a che punto Zig è supportato su una certa piattaforma.

[Tabella di supporto aggiornata a Zig 0.11.0](https://ziglang.org/download/0.11.0/release-notes.html#Support-Table)

## Semplifica la vita ai mantenitori di pacchetti

The reference Zig compiler is not completely self-hosted yet, but no matter what, [it will remain exactly 3 steps](https://github.com/ziglang/zig/issues/853) to go from having a system C++ compiler to having a fully self-hosted Zig compiler for any target.
Come fa notare Maya Rashish, [rendere Zig disponibile su altre piattaforme è divertente e richiede poco tempo](http://coypu.sdf.org/porting-zig.html).

Ad eccezione della modalità debug, le [modalità di build](https://ziglang.org/documentation/master/#Build-Mode) sono riproducibili/deterministiche.

C'è una [versione JSON della pagina dei download](https://ziglang.org/download/index.json).

Diversi membri del team di Zig hanno esperienza nel mentenimento di pacchetti.

- [Daurnimator](https://github.com/daurnimator) mantiene il [pacchetto per Arch Linux](https://archlinux.org/packages/extra/x86_64/zig/).
- [Marc Tiehuis](https://tiehuis.github.io/) mantiene il pacchetto per Visual Studio Code.
- [Andrew Kelley](https://andrewkelley.me/) ha passato circa un anno gestendo [pacchetti per Debian e Ubuntu](https://qa.debian.org/developer.php?login=superjoe30%40gmail.com&comaint=yes), e ogni tanto contribuisce a [nixpkgs](https://github.com/NixOS/nixpkgs/).
- [Jeff Fowler](https://blog.jfo.click/) mantiene il pacchetto Homebrew e ha creato il [pacchetto Sublime Text](https://github.com/ziglang/sublime-zig-language) (ora mantenuto da [emekoi](https://github.com/emekoi)).
