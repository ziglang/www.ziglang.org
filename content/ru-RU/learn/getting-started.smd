---
.title = "Начало работы",
.author = "",
.date = @date("2024-08-07:00:00:00"),
.layout = "page.shtml",
.custom = {
	"mobile_menu_title": "Начало работы",
	"toc": true,
},
---

# Релиз или ночная сборка?
Zig еще не достиг версии 1.0, и текущий цикл релизов связан с новыми версиями LLVM, которые выходят примерно раз в шесть месяцев.
На практике это означает, что **релизы Zig происходят с большими промежутками и быстро устаревают, учитывая текущую скорость разработки**.

Чтобы оценить Zig, можно воспользоваться релизом, но если вы решите, что вам нравится Zig и захотите в него углубиться, **мы рекомендуем обновиться до ночной сборки**. В основном потому, что таким образом вам будет легче получать помощь: большинство сообществ и такие сайты, как [zig.guide](https://zig.guide), отслеживают ветку `master` по указанным выше причинам.

Хорошая новость заключается в том, что очень легко переключаться с одной версии Zig на другую или даже иметь несколько версий на системе одновременно: релизы Zig — это автономные архивы, которые можно разместить в любом месте вашей системы.


# Установка Zig
## [Прямое скачивание]($heading.id('direct'))
Это самый простой способ получения Zig: скачайте пакет Zig для вашей платформы со [страницы загрузок](/download), распакуйте его и добавьте в переменную `PATH`, чтобы `zig` можно было вызывать из любого места.

### Настройка PATH в Windows
Чтобы настроить PATH в Windows, выполните **один** из следующих фрагментов кода в Powershell. Выберите, хотите ли вы применить это изменение на уровне всей системы (необходимо запустить Powershell с правами администратора) или только для текущего пользователя. **Убедитесь, что вы правильно указали расположение вашей копии Zig**. `;` перед `C:` — это не ошибка.

На уровне всей системы (Powershell с правами администратора):
```
[Environment]::SetEnvironmentVariable(
   "Path",
   [Environment]::GetEnvironmentVariable("Path", "Machine") + ";C:\your-path\zig-windows-x86_64-your-version",
   "Machine"
)
```

Только для текущего пользователя (Powershell):
```
[Environment]::SetEnvironmentVariable(
   "Path",
   [Environment]::GetEnvironmentVariable("Path", "User") + ";C:\your-path\zig-windows-x86_64-your-version",
   "User"
)
```
По завершении перезапустите Powershell.

### Настройка PATH в Linux, macOS, BSD
Добавьте расположение исполняемого файла zig в переменную окружения PATH.

Это обычно делается добавлением строки export в файл инициализации командной оболочки (например, `.profile` или `.zshrc`).
```bash
export PATH=$PATH:~/path/to/zig
```
По завершении выполните `source` файла инициализации командной оболочки или просто перезапустите командную оболочку.


## [Менеджеры пакетов]($heading.id('managers'))
### Windows
**WinGet**  
Zig доступен в [WinGet](https://github.com/microsoft/winget-pkgs/tree/master/manifests/z/zig/zig).
```
winget install -e --id zig.zig
```

**Chocolatey**  
Zig доступен на [Chocolatey](https://chocolatey.org/packages/zig).
```
choco install zig
```

**Scoop**  
Zig доступен на [Scoop](https://scoop.sh/#/apps?q=zig&id=7e124d6047c32d426e4143ab395d863fc9d6d491).
```
scoop install zig
```
Последняя [dev-сборка](https://scoop.sh/#/apps?q=zig&id=921df07e75042de645204262e784a17c2421944c):
```
scoop bucket add versions
scoop install versions/zig-dev
```

### macOS

**Homebrew**  
Последний релиз:
```
brew install zig
```

**MacPorts**
```
port install zig
```
### Linux
Zig также представлен во многих менеджерах пакетов для Linux. [Здесь](https://github.com/ziglang/zig/wiki/Install-Zig-from-a-Package-Manager) можно найти обновлённый список, но имейте в виду, что некоторые пакеты могут содержать устаревшие версии Zig.

## [Сборка из исходников]($heading.id('source'))
[Здесь](https://github.com/ziglang/zig/wiki/Building-Zig-From-Source)
можно найти больше информации о том, как собрать Zig из исходников на Linux, macOS и Windows.

# Рекомендуемые инструменты
## Подсветка синтаксиса и языковые серверы (LSP)
Все основные текстовые редакторы поддерживают подсветку синтаксиса для Zig. Некоторые поставляются сразу с ним, для других требуется установка соответствующего плагина.

Если вас интересует более глубокая интеграция между Zig и вашим редактором, ознакомьтесь с [zigtools/zls](https://github.com/zigtools/zls).

Если вас интересует, что доступно ещё, ознакомьтесь с разделом [Инструменты](tools).


# Запуск Hello, World!
Если процесс установки прошёл успешно, вы должны иметь возможность вызвать компилятор Zig из вашей командной оболочки. 
Давайте проверим это, создав вашу первую программу!

Перейдите в директорию вашего проекта и выполните:
```bash
mkdir hello-world
cd hello-world
zig init
```

Это должно вывести:
```
info: created build.zig
info: created build.zig.zon
info: created src/main.zig
info: created src/root.zig
info: see `zig build --help` for a menu of options
```

Выполнение команды `zig build run` должно скомпилировать исполняемый файл и запустить его, выведя:
```
All your codebase are belong to us.
Run `zig build test` to run the tests.
```

Поздравляем, вы успешно установили Zig!  

# Следующие шаги
**Изучите дополнительные ресурсы, представленные в разделе [Изучение](/learn)**. Не забудьте выбрать документацию для вашей версии Zig (для ночных сборок используйте документацию `master`). Также рекомендуется ознакомиться с [zig.guide](https://zig.guide) для более глубокого изучения языка.

Zig — это молодой проект, и, к сожалению, у нас пока нет возможности создать обширную документацию и учебные материалы на все случаи жизни. Поэтому рекомендуется [присоединиться к одному из сообществ Zig](https://github.com/ziglang/zig/wiki/Community), чтобы получать помощь в случае затруднений. Также рекомендуем ознакомиться с такими инициативами, как[Zig SHOWTIME](https://zig.show).

И в заключение, если Zig вызывает у вас интерес и вы хотите внести свой вклад в его развитие, мы будем признательны за любую поддержку. Рассмотрите возможность сделать пожертвование в [Zig Software Foundation](/zsf) <img src="/heart.svg" style="vertical-align:middle; margin-right: 5px">, чтобы помочь проекту ещё более активно расти и развиваться.
