---
.title = "Примеры",
.author = "",
.date = @date("2024-08-07:00:00:00"),
.layout = "page.shtml",
.custom = {
	"mobile_menu_title": "Примеры",
	"toc": true,
},
---

# [Вызов функций внешних библиотек]($heading.id('ext'))
Все функции системного API можно вызывать напрямую, без необходимости в дополнительных привязках. 

[]($code.language('=html').buildAsset("samples/0-windows-msgbox.zig"))

# [Обнаружение утечек памяти]($heading.id('leak'))
Используя `std.heap.GeneralPurposeAllocator`, можно отслеживать двойные освобождения и утечки памяти.

[]($code.language('=html').buildAsset("samples/1-memory-leak.zig"))

# [Интероперабельность с C]($heading.id('c-interop'))
Пример импорта заголовочного файла C и связывания с libc и raylib.

[]($code.language('=html').buildAsset("samples/2-c-interop.zig"))


# [Zigg Zagg]($heading.id('zigg-zagg'))
Zig *оптимизирован* для собеседований по программированию (нет).

[]($code.language('=html').buildAsset("samples/3-ziggzagg.zig"))

# [Обобщённые типы]($heading.id('generic'))
В языке Zig типы рассматриваются как значения на этапе компиляции. Мы используем функции, возвращающие типы, для реализации обобщённых алгоритмов и структур данных. В этом примере мы создаём простую обобщённую очередь и тестируем её работоспособность.

[]($code.language('=html').buildAsset("samples/4-generic-type.zig"))

# [Использование cURL из Zig]($heading.id('curl'))

[]($code.language('=html').buildAsset("samples/5-curl.zig"))
