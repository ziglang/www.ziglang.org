---
.title = "Ejemplos",
.author = "",
.date = @date("2024-10-06:00:00:00"),
.layout = "page.shtml",
.custom = {
	"mobile_menu_title": "Ejemplos",
	"toc": true,
},
---

# [Hello world]($heading.id('hello'))
A minimal example printing hello world.

[]($code.language('=html').buildAsset("samples/hello-world.zig"))

# [Llamado a funciones de librerías externas]($heading.id('ext'))
Todas las funciones de APIs pueden invocarse de esta manera, no requieres bibliotecas de traducción(library bindings) para accederlas.

[]($code.language('=html').buildAsset("samples/windows-msgbox.zig"))

# [Detección de fugas de memoria]($heading.id('leak'))
Con `std.heap.GeneralPurposeAllocator` puedes rastrear liberaciones dobles y fugas de memoria.

[]($code.language('=html').buildAsset("samples/memory-leak.zig"))


# [Interoperabilidad con C]($heading.id('c-interop'))
Ejemplo de importación de un archivo de encabezado de C y link hacia libc y raylib.

[]($code.language('=html').buildAsset("samples/c-interop.zig"))


# [Zigg Zagg]($heading.id('zigg-zagg'))
Zig está *optimizado* para entrevistas de trabajo de programador (es broma!).

[]($code.language('=html').buildAsset("samples/ziggzagg.zig"))


# [Tipos genéricos]($heading.id('generic'))
En Zig, los tipos son valores en tiempo de compilación y usamos funciones que retornan un tipo para implementar algoritmos genéricos y estructuras de datos. En este ejemplo implementamos una cola simple y probamos su comportamiento.

[]($code.language('=html').buildAsset("samples/generic-type.zig"))


# [cURL desde Zig]($heading.id('curl'))

[]($code.language('=html').buildAsset("samples/curl.zig"))
